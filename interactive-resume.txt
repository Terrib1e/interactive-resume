# Project Structure

- src\App.tsx
- src\components\animations\fade-in.tsx
- src\components\animations\scale-in.tsx
- src\components\contact\ContactForm.tsx
- src\components\EditModeManager.tsx
- src\components\editor\ResumeEditorForm.tsx
- src\components\editor\SectionHighlighter.tsx
- src\components\editor\SplitViewEditor.tsx
- src\components\editor\SyncScroll.tsx
- src\components\ExportButton.tsx
- src\components\resume\Education.tsx
- src\components\resume\Experience.tsx
- src\components\resume\GithubProjects.tsx
- src\components\resume\HeroSection.tsx
- src\components\resume\ModernSkillsCard.tsx
- src\components\resume\Profile.tsx
- src\components\resume\ProjectGallery.tsx
- src\components\resume\Projects.tsx
- src\components\resume\Skills.tsx
- src\components\resume\Timeline.tsx
- src\components\Resume.tsx
- src\components\theme\ThemeProvider.tsx
- src\components\theme\ThemeToggle.tsx
- src\data\resumeData.ts
- src\hooks\use-local-storage.ts
- src\hooks\use-toast.ts
- src\index.css
- src\lib\cache.ts
- src\lib\resume-utils.ts
- src\lib\utils.ts
- src\main.tsx
- src\services\github.ts
- src\styles\print.css
- src\types\resume.ts
- tailwind.config.js


>>> FILE START: src\App.tsx [type=tsx]
// src/App.tsx
import { ThemeProvider } from '@/components/theme/ThemeProvider';
import { ThemeToggle } from '@/components/theme/ThemeToggle';
import { EditModeManager } from '@/components/EditModeManager';
import { Toaster } from '@/components/ui/toaster';
import { resumeData } from '@/data/resumeData';

function App() {
  return (
    <ThemeProvider defaultTheme="system" storageKey="resume-theme">
      <div className="relative min-h-screen bg-background">
        <ThemeToggle />
        <EditModeManager initialData={resumeData} />
        <Toaster />
      </div>
    </ThemeProvider>
  );
}

export default App;

<<< FILE END

>>> FILE START: src\components\animations\fade-in.tsx [type=tsx]
// src/components/animations/fade-in.tsx
import { motion } from "framer-motion"
import { cn } from "@/lib/utils"

interface FadeInProps {
  children: React.ReactNode
  className?: string
  delay?: number
  direction?: "up" | "down" | "left" | "right"
}

export function FadeIn({
  children,
  className,
  delay = 0,
  direction = "up"
}: FadeInProps) {
  const directions = {
    up: { y: 24 },
    down: { y: -24 },
    left: { x: 24 },
    right: { x: -24 }
  }

  return (
    <motion.div
      initial={{
        opacity: 0,
        ...directions[direction]
      }}
      animate={{
        opacity: 1,
        x: 0,
        y: 0
      }}
      transition={{
        duration: 0.5,
        delay,
        ease: "easeOut"
      }}
      className={cn(className)}
    >
      {children}
    </motion.div>
  )
}
<<< FILE END

>>> FILE START: src\components\animations\scale-in.tsx [type=tsx]
// src/components/animations/scale-in.tsx
import { motion } from "framer-motion"
import { cn } from "@/lib/utils"

interface ScaleInProps {
  children: React.ReactNode
  className?: string
  delay?: number
}

export function ScaleIn({ children, className, delay = 0 }: ScaleInProps) {
  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      transition={{
        duration: 0.5,
        delay,
        ease: "easeOut"
      }}
      className={cn(className)}
    >
      {children}
    </motion.div>
  )
}
<<< FILE END

>>> FILE START: src\components\contact\ContactForm.tsx [type=tsx]
/* eslint-disable @typescript-eslint/no-unused-vars */
// src/components/contact/ContactForm.tsx
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Button } from "@/components/ui/button"
import { LoadingSpinner } from "@/components/ui/loading-spinner"
import { useToast } from "@/hooks/use-toast"
import { zodResolver } from "@hookform/resolvers/zod"
import { useForm } from "react-hook-form"
import * as z from "zod"
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form"

const formSchema = z.object({
  name: z.string().min(2, {
    message: "Name must be at least 2 characters.",
  }),
  email: z.string().email({
    message: "Please enter a valid email address.",
  }),
  subject: z.string().min(5, {
    message: "Subject must be at least 5 characters.",
  }),
  message: z.string().min(10, {
    message: "Message must be at least 10 characters.",
  }),
})

export function ContactForm() {
  const { toast } = useToast()
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: "",
      email: "",
      subject: "",
      message: "",
    },
  })

  async function onSubmit(values: z.infer<typeof formSchema>) {
    try {
      // Here you would typically send the form data to your backend
      console.log(values)

      // Show success message
      toast({
        title: "Message sent!",
        description: "Thanks for reaching out. I'll get back to you soon.",
      })

      // Reset form
      form.reset()
    } catch (error) {
      toast({
        variant: "destructive",
        title: "Error",
        description: "Something went wrong. Please try again.",
      })
    }
  }

  return (
    <Card className="w-full max-w-xl mx-auto">
      <CardHeader>
        <CardTitle>Get in Touch</CardTitle>
      </CardHeader>
      <CardContent>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Name</FormLabel>
                    <FormControl>
                      <Input placeholder="John Doe" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Email</FormLabel>
                    <FormControl>
                      <Input placeholder="john@example.com" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <FormField
              control={form.control}
              name="subject"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Subject</FormLabel>
                  <FormControl>
                    <Input placeholder="What's this about?" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="message"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Message</FormLabel>
                  <FormControl>
                    <Textarea
                      placeholder="Your message here..."
                      className="min-h-[120px]"
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <Button type="submit" className="w-full" disabled={form.formState.isSubmitting}>
              {form.formState.isSubmitting ? (
                <>
                  <LoadingSpinner className="mr-2" />
                  Sending...
                </>
              ) : (
                "Send Message"
              )}
            </Button>
          </form>
        </Form>
      </CardContent>
    </Card>
  )
}
<<< FILE END

>>> FILE START: src\components\EditModeManager.tsx [type=tsx]
// src/components/EditModeManager.tsx (simplified)
import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import Resume from '@/components/Resume';
import { SplitViewEditor } from '@/components/editor/SplitViewEditor';
import { Edit, Eye, Save, Download, Trash2, Columns } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { useLocalStorage } from '@/hooks/use-local-storage';
import { ExportButton } from '@/components/ExportButton';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from '@/components/ui/alert-dialog';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';
import type { ResumeData } from '@/types/resume';

interface EditModeManagerProps {
  initialData: ResumeData;
}

// Define the edit modes
type EditMode = 'preview' | 'split';

export function EditModeManager({ initialData }: EditModeManagerProps) {
  const [editMode, setEditMode] = useState<EditMode>('preview');
  const [resumeData, setResumeData] = useState<ResumeData>(initialData);
  const { toast } = useToast();

  // Local storage integration
  const [storedData, setStoredData, removeStoredData] = useLocalStorage<ResumeData>('resume-data', initialData);

  // Load data from localStorage on mount
  useEffect(() => {
    if (storedData) {
      setResumeData(storedData);
    }
  }, [storedData]);

  const handleSave = (newData: ResumeData) => {
    setResumeData(newData);
    setStoredData(newData);
    setEditMode('preview');

    toast({
      title: 'Changes saved',
      description: 'Your resume has been updated and saved to local storage.',
    });
  };

  const handleResetToDefault = () => {
    setResumeData(initialData);
    setStoredData(initialData);

    toast({
      title: 'Reset complete',
      description: 'Your resume has been reset to the default template.',
    });
  };

  const handleClearData = () => {
    removeStoredData();
    setResumeData(initialData);

    toast({
      title: 'Data cleared',
      description: 'Your resume data has been cleared from local storage.',
    });
  };

  // Export resume data as JSON
  const exportJSON = () => {
    const dataStr = JSON.stringify(resumeData, null, 2);
    const dataUri = `data:application/json;charset=utf-8,${encodeURIComponent(dataStr)}`;
    const exportFileDefaultName = 'resume-data.json';

    const linkElement = document.createElement('a');
    linkElement.setAttribute('href', dataUri);
    linkElement.setAttribute('download', exportFileDefaultName);
    linkElement.click();

    toast({
      title: 'JSON exported',
      description: 'Your resume data has been exported as a JSON file.',
    });
  };

  // Import resume data from JSON file
  const importJSON = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const importedData = JSON.parse(e.target?.result as string) as ResumeData;
        setResumeData(importedData);
        setStoredData(importedData);

        toast({
          title: 'Import successful',
          description: 'Your resume data has been imported and saved.',
        });
      } catch (error) {
        toast({
          variant: 'destructive',
          title: 'Import failed',
          description: 'There was an error importing your resume data. Please check the file format.',
        });
      }
    };
    reader.readAsText(file);

    // Reset the input
    event.target.value = '';
  };

  return (
    <div className="relative min-h-screen" id="resume-content">
      {/* Mode Toggle and Data Management Buttons */}
      <div className="fixed top-4 right-4 z-50 flex gap-2">
        {/* Data Management Dropdown */}
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="outline" size="sm">
              <Save className="w-4 h-4 mr-2" />
              Data
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuLabel>Resume Data</DropdownMenuLabel>
            <DropdownMenuSeparator />
            <DropdownMenuItem onClick={exportJSON}>
              <Download className="w-4 h-4 mr-2" />
              Export JSON
            </DropdownMenuItem>
            <DropdownMenuItem onClick={() => document.getElementById('json-upload')?.click()}>
              <Save className="w-4 h-4 mr-2" />
              Import JSON
              <input id="json-upload" type="file" accept=".json" onChange={importJSON} className="hidden" />
            </DropdownMenuItem>
            <DropdownMenuSeparator />
            <AlertDialog>
              <AlertDialogTrigger asChild>
                <DropdownMenuItem onSelect={(e) => e.preventDefault()}>
                  <Trash2 className="w-4 h-4 mr-2 text-destructive" />
                  <span className="text-destructive">Reset to Default</span>
                </DropdownMenuItem>
              </AlertDialogTrigger>
              <AlertDialogContent>
                <AlertDialogHeader>
                  <AlertDialogTitle>Are you sure?</AlertDialogTitle>
                  <AlertDialogDescription>This will reset your resume to the default template. All your custom data will be lost.</AlertDialogDescription>
                </AlertDialogHeader>
                <AlertDialogFooter>
                  <AlertDialogCancel>Cancel</AlertDialogCancel>
                  <AlertDialogAction onClick={handleResetToDefault}>Reset</AlertDialogAction>
                </AlertDialogFooter>
              </AlertDialogContent>
            </AlertDialog>
            <AlertDialog>
              <AlertDialogTrigger asChild>
                <DropdownMenuItem onSelect={(e) => e.preventDefault()}>
                  <Trash2 className="w-4 h-4 mr-2 text-destructive" />
                  <span className="text-destructive">Clear All Data</span>
                </DropdownMenuItem>
              </AlertDialogTrigger>
              <AlertDialogContent>
                <AlertDialogHeader>
                  <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
                  <AlertDialogDescription>This will permanently remove your resume data from local storage. This action cannot be undone.</AlertDialogDescription>
                </AlertDialogHeader>
                <AlertDialogFooter>
                  <AlertDialogCancel>Cancel</AlertDialogCancel>
                  <AlertDialogAction onClick={handleClearData}>Delete</AlertDialogAction>
                </AlertDialogFooter>
              </AlertDialogContent>
            </AlertDialog>
          </DropdownMenuContent>
        </DropdownMenu>

        {/* Edit/Preview Mode Toggle */}
        <Button variant="outline" size="sm" onClick={() => setEditMode(editMode === 'preview' ? 'split' : 'preview')}>
          {editMode === 'preview' ? (
            <>
              <Edit className="w-4 h-4 mr-2" />
              Edit
            </>
          ) : (
            <>
              <Eye className="w-4 h-4 mr-2" />
              Preview
            </>
          )}
        </Button>
      </div>

      {/* Main Content */}
      {editMode === 'split' ? <SplitViewEditor initialData={resumeData} onSave={handleSave} /> : <Resume data={resumeData} />}

      {/* Only show ExportButton in preview mode */}
      {editMode === 'preview' && <ExportButton />}
    </div>
  );
}

<<< FILE END

>>> FILE START: src\components\editor\ResumeEditorForm.tsx [type=tsx]
// src/components/editor/ResumeEditorForm.tsx
import { useState, useEffect, Key } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage, FormDescription } from '@/components/ui/form';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from '@/components/ui/alert-dialog';
import { Plus, Trash2, Save, MapPin, Calendar, Briefcase, GraduationCap, Code, FolderGit2, Award, FileText, CheckCircle2, User } from 'lucide-react';
import { useFieldArray, UseFormReturn } from 'react-hook-form';
import { Badge } from '@/components/ui/badge';
import { cn } from '@/lib/utils';
import type { ResumeData } from '@/types/resume';

// Reusable skill category editor component
interface SkillCategoryEditorProps {
  categoryName: string;
  form: UseFormReturn<any>;
  addSkill: () => void;
  removeSkill: (index: number) => void;
}

function SkillCategoryEditor({ categoryName, form, addSkill, removeSkill }: SkillCategoryEditorProps) {
  const fields = form.watch(`skills.${categoryName}`) || [];

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <h4 className="font-semibold">{categoryName.charAt(0).toUpperCase() + categoryName.slice(1)} Skills</h4>
        <Button type="button" variant="outline" size="sm" onClick={addSkill}>
          <Plus className="w-4 h-4 mr-2" />
          Add Skill
        </Button>
      </div>

      {fields.length === 0 ? (
        <div className="text-center py-4 text-muted-foreground border rounded-md">No skills added yet. Click the button above to add your first skill.</div>
      ) : (
        <div className="border rounded-md p-4">
          <div className="grid grid-cols-12 gap-2 mb-2 font-medium text-sm">
            <div className="col-span-5">Skill</div>
            <div className="col-span-3">Level (0-100)</div>
            <div className="col-span-3">Experience</div>
            <div className="col-span-1">Actions</div>
          </div>

          {fields.map((_: any, index: Key | null | undefined) => (
            <div key={index} className="grid grid-cols-12 gap-2 items-center mb-2">
              <div className="col-span-5">
                <FormField
                  control={form.control}
                  name={`skills.${categoryName}.${index}.name`}
                  render={({ field }) => (
                    <FormItem className="mb-0">
                      <FormControl>
                        <Input placeholder="e.g. React" {...field} />
                      </FormControl>
                    </FormItem>
                  )}
                />
              </div>

              <div className="col-span-3">
                <FormField
                  control={form.control}
                  name={`skills.${categoryName}.${index}.level`}
                  render={({ field }) => (
                    <FormItem className="mb-0">
                      <FormControl>
                        <Input type="number" min={0} max={100} {...field} onChange={(e) => field.onChange(parseInt(e.target.value) || 0)} />
                      </FormControl>
                    </FormItem>
                  )}
                />
              </div>

              <div className="col-span-3">
                <FormField
                  control={form.control}
                  name={`skills.${categoryName}.${index}.experience`}
                  render={({ field }) => (
                    <FormItem className="mb-0">
                      <FormControl>
                        <Input placeholder="e.g. 3 years" {...field} />
                      </FormControl>
                    </FormItem>
                  )}
                />
              </div>

              <div className="col-span-1 flex justify-center">
                <Button type="button" variant="destructive" size="sm" onClick={() => removeSkill(Number(index))}>
                  <Trash2 className="w-4 h-4" />
                </Button>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}

// List editor component for array-type fields like certifications
interface ListEditorProps {
  items: string[];
  addItem: (value?: string) => void;
  removeItem: (index: number) => void;
  renderField: (index: number) => React.ReactNode;
  emptyMessage: string;
  addButtonLabel: string;
  isTextarea?: boolean;
}

function ListEditor({ items, addItem, removeItem, renderField, emptyMessage, addButtonLabel, isTextarea = false }: ListEditorProps) {
  return (
    <div className="space-y-4">
      {items.length === 0 ? (
        <div className="text-center py-4 text-muted-foreground border rounded-md">{emptyMessage}</div>
      ) : (
        <div className="space-y-2">
          {items.map((_, index) => (
            <div key={index} className="flex items-start gap-2">
              {renderField(index)}
              <Button type="button" variant="destructive" size="sm" className={cn(isTextarea ? 'mt-8' : '')} onClick={() => removeItem(index)}>
                <Trash2 className="w-4 h-4" />
              </Button>
            </div>
          ))}
        </div>
      )}
      <Button type="button" variant="outline" size="sm" onClick={() => addItem()}>
        <Plus className="w-4 h-4 mr-2" />
        {addButtonLabel}
      </Button>
    </div>
  );
}

// Main ResumeEditorForm component
interface ResumeEditorFormProps {
  form: UseFormReturn<any>;
  onSubmit?: (values: any) => void;
  setActiveSection?: (section: string | null) => void;
}

export function ResumeEditorForm({ form, onSubmit, setActiveSection }: ResumeEditorFormProps) {
  const [activeAccordion, setActiveAccordion] = useState<string | null>('profile');
  const [formCompletion, setFormCompletion] = useState<Record<string, number>>({});

  // Track completion status of each section
  useEffect(() => {
    const currentValues = form.getValues();
    const completion: Record<string, number> = {};

    // Profile completion
    const profileFields = Object.keys(currentValues.profile || {}).filter((k) => k !== 'links');
    const filledProfileFields = profileFields.filter((k) => !!currentValues.profile[k]);
    completion.profile = Math.round((filledProfileFields.length / profileFields.length) * 100);

    // Experience completion
    if (currentValues.experience?.length) {
      const expCompletion = currentValues.experience.map((exp: any) => {
        const expFields = ['company', 'position', 'period'];
        const filledExpFields = expFields.filter((k) => !!exp[k]);
        return filledExpFields.length / expFields.length;
      });
      completion.experience = Math.round((expCompletion.reduce((a: number, b: number) => a + b, 0) / expCompletion.length) * 100);
    } else {
      completion.experience = 0;
    }

    // Education completion
    if (currentValues.education?.length) {
      const eduCompletion = currentValues.education.map((edu: any) => {
        const eduFields = ['school', 'degree', 'period'];
        const filledEduFields = eduFields.filter((k) => !!edu[k]);
        return filledEduFields.length / eduFields.length;
      });
      completion.education = Math.round((eduCompletion.reduce((a: number, b: number) => a + b, 0) / eduCompletion.length) * 100);
    } else {
      completion.education = 0;
    }

    // Skills completion
    const skillCategories = Object.keys(currentValues.skills || {});
    if (skillCategories.length) {
      const skillCompletion = skillCategories.map((category) => {
        return (currentValues.skills[category]?.length || 0) > 0 ? 100 : 0;
      });
      completion.skills = Math.round(skillCompletion.reduce<number>((a, b) => a + b, 0) / skillCategories.length);
    } else {
      completion.skills = 0;
    }

    // Projects completion
    if (currentValues.projects?.length) {
      const projCompletion = currentValues.projects.map((proj: any) => {
        const projFields = ['title', 'description', 'period'];
        const filledProjFields = projFields.filter((k) => !!proj[k]);
        return filledProjFields.length / projFields.length;
      });
      completion.projects = Math.round((projCompletion.reduce((a: number, b: number) => a + b, 0) / projCompletion.length) * 100);
    } else {
      completion.projects = 0;
    }

    // Certifications completion
    completion.certifications = (currentValues.certifications?.length || 0) > 0 ? 100 : 0;

    // Additional info completion
    completion.additionalInfo = (currentValues.additionalInfo?.length || 0) > 0 ? 100 : 0;

    setFormCompletion(completion);
  }, [form.watch(), form.getValues]);

  // Update active section when accordion changes
  const handleAccordionChange = (value: string) => {
    setActiveAccordion(value || null);
    if (setActiveSection) {
      setActiveSection(value === '' ? null : value);
    }
  };

  // Field arrays for form collections
  const {
    fields: experienceFields,
    append: appendExperience,
    remove: removeExperience,
  } = useFieldArray({
    control: form.control,
    name: 'experience',
  });

  const {
    fields: educationFields,
    append: appendEducation,
    remove: removeEducation,
  } = useFieldArray({
    control: form.control,
    name: 'education',
  });

  const {
    fields: projectFields,
    append: appendProject,
    remove: removeProject,
  } = useFieldArray({
    control: form.control,
    name: 'projects',
  });

  // Helper functions for managing nested arrays
  function appendAchievement(experienceIndex: number, value: string = '') {
    const achievements = form.getValues(`experience.${experienceIndex}.achievements`) || [];
    form.setValue(`experience.${experienceIndex}.achievements`, [...achievements, value]);
  }

  function removeAchievement(experienceIndex: number, achievementIndex: number) {
    const achievements = form.getValues(`experience.${experienceIndex}.achievements`) || [];
    form.setValue(
      `experience.${experienceIndex}.achievements`,
      achievements.filter((_: any, i: number) => i !== achievementIndex),
    );
  }

  function appendTechnology(experienceIndex: number, value: string = '') {
    const technologies = form.getValues(`experience.${experienceIndex}.technologies`) || [];
    form.setValue(`experience.${experienceIndex}.technologies`, [...technologies, value]);
  }

  function removeTechnology(experienceIndex: number, techIndex: number) {
    const technologies = form.getValues(`experience.${experienceIndex}.technologies`) || [];
    form.setValue(
      `experience.${experienceIndex}.technologies`,
      technologies.filter((_: any, i: number) => i !== techIndex),
    );
  }

  // Project helper functions
  function appendProjectHighlight(projectIndex: number, value: string = '') {
    const highlights = form.getValues(`projects.${projectIndex}.highlights`) || [];
    form.setValue(`projects.${projectIndex}.highlights`, [...highlights, value]);
  }

  function removeProjectHighlight(projectIndex: number, highlightIndex: number) {
    const highlights = form.getValues(`projects.${projectIndex}.highlights`) || [];
    form.setValue(
      `projects.${projectIndex}.highlights`,
      highlights.filter((_: any, i: number) => i !== highlightIndex),
    );
  }

  function appendProjectTechnology(projectIndex: number, value: string = '') {
    const technologies = form.getValues(`projects.${projectIndex}.technologies`) || [];
    form.setValue(`projects.${projectIndex}.technologies`, [...technologies, value]);
  }

  function removeProjectTechnology(projectIndex: number, techIndex: number) {
    const technologies = form.getValues(`projects.${projectIndex}.technologies`) || [];
    form.setValue(
      `projects.${projectIndex}.technologies`,
      technologies.filter((_: any, i: number) => i !== techIndex),
    );
  }

  // Education helper functions
  function appendEducationAchievement(educationIndex: number, value: string = '') {
    const achievements = form.getValues(`education.${educationIndex}.achievements`) || [];
    form.setValue(`education.${educationIndex}.achievements`, [...achievements, value]);
  }

  function removeEducationAchievement(educationIndex: number, achievementIndex: number) {
    const achievements = form.getValues(`education.${educationIndex}.achievements`) || [];
    form.setValue(
      `education.${educationIndex}.achievements`,
      achievements.filter((_: any, i: number) => i !== achievementIndex),
    );
  }

  // Skills management functions
  function appendSkill(category: string, skill = { name: '', level: 80, experience: '' }) {
    const skills = form.getValues(`skills.${category}`) || [];
    form.setValue(`skills.${category}`, [...skills, skill]);
  }

  function removeSkill(category: string, index: number) {
    const skills = form.getValues(`skills.${category}`) || [];
    form.setValue(
      `skills.${category}`,
      skills.filter((_: any, i: number) => i !== index),
    );
  }

  // Certifications and additional info functions
  function appendCertification(value: string = '') {
    const certifications = form.getValues('certifications') || [];
    form.setValue('certifications', [...certifications, value]);
  }

  function removeCertification(index: number) {
    const certifications = form.getValues('certifications') || [];
    form.setValue(
      'certifications',
      certifications.filter((_: any, i: number) => i !== index),
    );
  }

  function appendAdditionalInfo(value: string = '') {
    const additionalInfo = form.getValues('additionalInfo') || [];
    form.setValue('additionalInfo', [...additionalInfo, value]);
  }

  function removeAdditionalInfo(index: number) {
    const additionalInfo = form.getValues('additionalInfo') || [];
    form.setValue(
      'additionalInfo',
      additionalInfo.filter((_: any, i: number) => i !== index),
    );
  }

  // Render completion badge
  const renderCompletionBadge = (section: string) => {
    const completion = formCompletion[section] || 0;
    let color = 'bg-red-500';
    if (completion >= 70) color = 'bg-green-500';
    else if (completion >= 30) color = 'bg-yellow-500';

    return (
      <div className="flex items-center gap-2">
        <div className={`w-3 h-3 rounded-full ${color}`}></div>
        <span className="text-xs text-muted-foreground">{completion}%</span>
        {completion === 100 && <CheckCircle2 className="w-4 h-4 text-green-500" />}
      </div>
    );
  };

  return (
    <Card className="border-0 shadow-none">
      <CardContent className="p-0">
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit || (() => {}))} className="space-y-6">
            <Accordion type="single" collapsible defaultValue="profile" value={activeAccordion || undefined} onValueChange={handleAccordionChange} className="border rounded-md">
              {/* Profile Section */}
              <AccordionItem value="profile" className="border-b">
                <AccordionTrigger className="px-4 py-2 hover:bg-muted/50 data-[state=open]:bg-muted/50">
                  <div className="flex items-center gap-2">
                    <User className="w-5 h-5 text-muted-foreground" />
                    <span>Profile Information</span>
                  </div>
                  <div className="ml-auto mr-4">{renderCompletionBadge('profile')}</div>
                </AccordionTrigger>
                <AccordionContent className="p-4 pt-2 bg-background">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <FormField
                      control={form.control}
                      name="profile.name"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Full Name</FormLabel>
                          <FormControl>
                            <Input {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="profile.title"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Title</FormLabel>
                          <FormControl>
                            <Input {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="profile.email"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Email</FormLabel>
                          <FormControl>
                            <Input type="email" {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="profile.phone"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Phone</FormLabel>
                          <FormControl>
                            <Input {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="profile.location"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Location</FormLabel>
                          <FormControl>
                            <Input {...field} />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="profile.avatar"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Avatar URL</FormLabel>
                          <FormControl>
                            <Input {...field} />
                          </FormControl>
                          <FormDescription>Use a publicly accessible image URL</FormDescription>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>

                  <div className="mt-4">
                    <h4 className="text-sm font-medium mb-2">Social Links</h4>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <FormField
                        control={form.control}
                        name="profile.links.github"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>GitHub</FormLabel>
                            <FormControl>
                              <Input placeholder="github.com/username" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={form.control}
                        name="profile.links.linkedin"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>LinkedIn</FormLabel>
                            <FormControl>
                              <Input placeholder="linkedin.com/in/username" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                      <FormField
                        control={form.control}
                        name="profile.links.website"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>Website</FormLabel>
                            <FormControl>
                              <Input placeholder="example.com" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    </div>
                  </div>

                  <FormField
                    control={form.control}
                    name="profile.bio"
                    render={({ field }) => (
                      <FormItem className="mt-4">
                        <FormLabel>Bio</FormLabel>
                        <FormControl>
                          <Textarea className="min-h-[120px]" {...field} />
                        </FormControl>
                        <FormDescription>A brief professional summary (3-5 sentences recommended)</FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </AccordionContent>
              </AccordionItem>

              {/* Experience Section */}
              <AccordionItem value="experience" className="border-b">
                <AccordionTrigger className="px-4 py-2 hover:bg-muted/50 data-[state=open]:bg-muted/50">
                  <div className="flex items-center gap-2">
                    <Briefcase className="w-5 h-5 text-muted-foreground" />
                    <span>Experience</span>
                  </div>
                  <div className="ml-auto mr-4">{renderCompletionBadge('experience')}</div>
                </AccordionTrigger>
                <AccordionContent className="p-4 pt-2 bg-background">
                  {experienceFields.length === 0 ? (
                    <div className="text-center py-6 border rounded-lg">
                      <p className="text-muted-foreground mb-4">No experience entries yet</p>
                      <Button
                        type="button"
                        variant="outline"
                        onClick={() =>
                          appendExperience({
                            company: '',
                            position: '',
                            location: '',
                            period: '',
                            achievements: [],
                            technologies: [],
                          })
                        }
                      >
                        <Plus className="w-4 h-4 mr-2" />
                        Add Experience
                      </Button>
                    </div>
                  ) : (
                    experienceFields.map((field, index) => (
                      <div key={field.id} className="mb-6 p-4 border rounded-lg bg-card">
                        <div className="flex justify-between items-center mb-4">
                          <h4 className="font-semibold flex items-center gap-2">
                            <Briefcase className="w-4 h-4 text-muted-foreground" />
                            Experience {index + 1}
                          </h4>
                          <AlertDialog>
                            <AlertDialogTrigger asChild>
                              <Button variant="destructive" size="sm">
                                <Trash2 className="w-4 h-4" />
                              </Button>
                            </AlertDialogTrigger>
                            <AlertDialogContent>
                              <AlertDialogHeader>
                                <AlertDialogTitle>Are you sure?</AlertDialogTitle>
                                <AlertDialogDescription>This action cannot be undone. This will permanently delete this experience entry.</AlertDialogDescription>
                              </AlertDialogHeader>
                              <AlertDialogFooter>
                                <AlertDialogCancel>Cancel</AlertDialogCancel>
                                <AlertDialogAction onClick={() => removeExperience(index)}>Delete</AlertDialogAction>
                              </AlertDialogFooter>
                            </AlertDialogContent>
                          </AlertDialog>
                        </div>

                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <FormField
                            control={form.control}
                            name={`experience.${index}.company`}
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>Company</FormLabel>
                                <FormControl>
                                  <Input placeholder="e.g. Acme Corporation" {...field} />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                          <FormField
                            control={form.control}
                            name={`experience.${index}.position`}
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>Position</FormLabel>
                                <FormControl>
                                  <Input placeholder="e.g. Senior Developer" {...field} />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                          <FormField
                            control={form.control}
                            name={`experience.${index}.location`}
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>Location</FormLabel>
                                <FormControl>
                                  <Input placeholder="e.g. San Francisco, CA" {...field} />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                          <FormField
                            control={form.control}
                            name={`experience.${index}.period`}
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>Period</FormLabel>
                                <FormControl>
                                  <Input placeholder="Jan 2020 to Present" {...field} />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                        </div>

                        {/* Achievements */}
                        <div className="mt-4 p-3 border rounded-md">
                          <FormLabel className="mb-2 block">Achievements</FormLabel>
                          <div className="space-y-2">
                            {form.watch(`experience.${index}.achievements`)?.map((_: any, achievementIndex: Key | null | undefined) => (
                              <div key={achievementIndex} className="flex items-center gap-2">
                                <FormField
                                  control={form.control}
                                  name={`experience.${index}.achievements.${achievementIndex}`}
                                  render={({ field }) => (
                                    <FormItem className="flex-1">
                                      <FormControl>
                                        <Input placeholder="Describe a significant achievement" {...field} />
                                      </FormControl>
                                    </FormItem>
                                  )}
                                />
                                <Button type="button" variant="destructive" size="sm" onClick={() => removeAchievement(index, Number(achievementIndex))}>
                                  <Trash2 className="w-4 h-4" />
                                </Button>
                              </div>
                            ))}
                            <Button type="button" variant="outline" size="sm" onClick={() => appendAchievement(index)}>
                              <Plus className="w-4 h-4 mr-2" />
                              Add Achievement
                            </Button>
                          </div>
                        </div>

                        {/* Technologies */}
                        <div className="mt-4 p-3 border rounded-md">
                          <FormLabel className="mb-2 block">Technologies</FormLabel>
                          <div className="space-y-2">
                            {form.watch(`experience.${index}.technologies`)?.map((_: any, techIndex: Key | null | undefined) => (
                              <div key={techIndex} className="flex items-center gap-2">
                                <FormField
                                  control={form.control}
                                  name={`experience.${index}.technologies.${techIndex}`}
                                  render={({ field }) => (
                                    <FormItem className="flex-1">
                                      <FormControl>
                                        <Input placeholder="e.g. React, Python, AWS" {...field} />
                                      </FormControl>
                                    </FormItem>
                                  )}
                                />
                                <Button type="button" variant="destructive" size="sm" onClick={() => removeTechnology(index, Number(techIndex))}>
                                  <Trash2 className="w-4 h-4" />
                                </Button>
                              </div>
                            ))}
                            <Button type="button" variant="outline" size="sm" onClick={() => appendTechnology(index)}>
                              <Plus className="w-4 h-4 mr-2" />
                              Add Technology
                            </Button>
                          </div>
                        </div>
                      </div>
                    ))
                  )}

                  {experienceFields.length > 0 && (
                    <Button
                      type="button"
                      variant="outline"
                      onClick={() =>
                        appendExperience({
                          company: '',
                          position: '',
                          location: '',
                          period: '',
                          achievements: [],
                          technologies: [],
                        })
                      }
                      className="mt-4"
                    >
                      <Plus className="w-4 h-4 mr-2" />
                      Add Another Experience
                    </Button>
                  )}
                </AccordionContent>
              </AccordionItem>

              {/* Skills Section */}
              <AccordionItem value="skills" className="border-b">
                <AccordionTrigger className="px-4 py-2 hover:bg-muted/50 data-[state=open]:bg-muted/50">
                  <div className="flex items-center gap-2">
                    <Code className="w-5 h-5 text-muted-foreground" />
                    <span>Skills</span>
                  </div>
                  <div className="ml-auto mr-4">{renderCompletionBadge('skills')}</div>
                </AccordionTrigger>
                <AccordionContent className="p-4 pt-2 bg-background">
                  {/* Tabs for different skill categories */}
                  <Tabs defaultValue="frontend" className="w-full">
                    <TabsList className="mb-4">
                      <TabsTrigger value="frontend">Frontend</TabsTrigger>
                      <TabsTrigger value="backend">Backend</TabsTrigger>
                      <TabsTrigger value="cloud">Cloud</TabsTrigger>
                      <TabsTrigger value="databases">Databases</TabsTrigger>
                      <TabsTrigger value="analytics">Analytics</TabsTrigger>
                    </TabsList>

                    {/* Frontend Skills Tab */}
                    <TabsContent value="frontend">
                      <SkillCategoryEditor categoryName="frontend" form={form} addSkill={() => appendSkill('frontend')} removeSkill={(index) => removeSkill('frontend', index)} />
                    </TabsContent>

                    {/* Backend Skills Tab */}
                    <TabsContent value="backend">
                      <SkillCategoryEditor categoryName="backend" form={form} addSkill={() => appendSkill('backend')} removeSkill={(index) => removeSkill('backend', index)} />
                    </TabsContent>

                    {/* Cloud Skills Tab */}
                    <TabsContent value="cloud">
                      <SkillCategoryEditor categoryName="cloud" form={form} addSkill={() => appendSkill('cloud')} removeSkill={(index) => removeSkill('cloud', index)} />
                    </TabsContent>

                    {/* Database Skills Tab */}
                    <TabsContent value="databases">
                      <SkillCategoryEditor categoryName="databases" form={form} addSkill={() => appendSkill('databases')} removeSkill={(index) => removeSkill('databases', index)} />
                    </TabsContent>

                    {/* Analytics Skills Tab */}
                    <TabsContent value="analytics">
                      <SkillCategoryEditor categoryName="analytics" form={form} addSkill={() => appendSkill('analytics')} removeSkill={(index) => removeSkill('analytics', index)} />
                    </TabsContent>
                  </Tabs>
                </AccordionContent>
              </AccordionItem>

              {/* Education Section */}
              <AccordionItem value="education" className="border-b">
                <AccordionTrigger className="px-4 py-2 hover:bg-muted/50 data-[state=open]:bg-muted/50">
                  <div className="flex items-center gap-2">
                    <GraduationCap className="w-5 h-5 text-muted-foreground" />
                    <span>Education</span>
                  </div>
                  <div className="ml-auto mr-4">{renderCompletionBadge('education')}</div>
                </AccordionTrigger>
                <AccordionContent className="p-4 pt-2 bg-background">
                  {educationFields.length === 0 ? (
                    <div className="text-center py-6 border rounded-lg">
                      <p className="text-muted-foreground mb-4">No education entries yet</p>
                      <Button
                        type="button"
                        variant="outline"
                        onClick={() =>
                          appendEducation({
                            school: '',
                            degree: '',
                            location: '',
                            period: '',
                            achievements: [],
                          })
                        }
                      >
                        <Plus className="w-4 h-4 mr-2" />
                        Add Education
                      </Button>
                    </div>
                  ) : (
                    educationFields.map((field, index) => (
                      <div key={field.id} className="mb-6 p-4 border rounded-lg bg-card">
                        <div className="flex justify-between items-center mb-4">
                          <h4 className="font-semibold flex items-center gap-2">
                            <GraduationCap className="w-4 h-4 text-muted-foreground" />
                            Education {index + 1}
                          </h4>
                          <AlertDialog>
                            <AlertDialogTrigger asChild>
                              <Button variant="destructive" size="sm">
                                <Trash2 className="w-4 h-4" />
                              </Button>
                            </AlertDialogTrigger>
                            <AlertDialogContent>
                              <AlertDialogHeader>
                                <AlertDialogTitle>Are you sure?</AlertDialogTitle>
                                <AlertDialogDescription>This action cannot be undone. This will permanently delete this education entry.</AlertDialogDescription>
                              </AlertDialogHeader>
                              <AlertDialogFooter>
                                <AlertDialogCancel>Cancel</AlertDialogCancel>
                                <AlertDialogAction onClick={() => removeEducation(index)}>Delete</AlertDialogAction>
                              </AlertDialogFooter>
                            </AlertDialogContent>
                          </AlertDialog>
                        </div>

                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <FormField
                            control={form.control}
                            name={`education.${index}.school`}
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>School / University</FormLabel>
                                <FormControl>
                                  <Input placeholder="e.g. Stanford University" {...field} />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                          <FormField
                            control={form.control}
                            name={`education.${index}.degree`}
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>Degree / Program</FormLabel>
                                <FormControl>
                                  <Input placeholder="e.g. B.S. Computer Science" {...field} />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                          <FormField
                            control={form.control}
                            name={`education.${index}.location`}
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>Location</FormLabel>
                                <FormControl>
                                  <Input placeholder="e.g. Stanford, CA" {...field} />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                          <FormField
                            control={form.control}
                            name={`education.${index}.period`}
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>Period</FormLabel>
                                <FormControl>
                                  <Input placeholder="e.g. 2016-2020" {...field} />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                          <FormField
                            control={form.control}
                            name={`education.${index}.gpa`}
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>GPA (Optional)</FormLabel>
                                <FormControl>
                                  <Input placeholder="e.g. 3.8" type="number" step="0.1" min="0" max="4" {...field} onChange={(e) => field.onChange(parseFloat(e.target.value) || '')} />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                        </div>

                        {/* Achievements */}
                        <div className="mt-4 p-3 border rounded-md">
                          <FormLabel className="mb-2 block">Achievements / Activities (Optional)</FormLabel>
                          <div className="space-y-2">
                            {form.watch(`education.${index}.achievements`)?.map((_: any, achievementIndex: Key | null | undefined) => (
                              <div key={achievementIndex} className="flex items-center gap-2">
                                <FormField
                                  control={form.control}
                                  name={`education.${index}.achievements.${achievementIndex}`}
                                  render={({ field }) => (
                                    <FormItem className="flex-1">
                                      <FormControl>
                                        <Input placeholder="e.g. Dean's List, Research Assistant" {...field} />
                                      </FormControl>
                                    </FormItem>
                                  )}
                                />
                                <Button type="button" variant="destructive" size="sm" onClick={() => removeEducationAchievement(index, Number(achievementIndex))}>
                                  <Trash2 className="w-4 h-4" />
                                </Button>
                              </div>
                            ))}
                            <Button type="button" variant="outline" size="sm" onClick={() => appendEducationAchievement(index)}>
                              <Plus className="w-4 h-4 mr-2" />
                              Add Achievement
                            </Button>
                          </div>
                        </div>
                      </div>
                    ))
                  )}

                  {educationFields.length > 0 && (
                    <Button
                      type="button"
                      variant="outline"
                      onClick={() =>
                        appendEducation({
                          school: '',
                          degree: '',
                          location: '',
                          period: '',
                          achievements: [],
                        })
                      }
                      className="mt-4"
                    >
                      <Plus className="w-4 h-4 mr-2" />
                      Add Another Education
                    </Button>
                  )}
                </AccordionContent>
              </AccordionItem>

              {/* Projects Section */}
              <AccordionItem value="projects" className="border-b">
                <AccordionTrigger className="px-4 py-2 hover:bg-muted/50 data-[state=open]:bg-muted/50">
                  <div className="flex items-center gap-2">
                    <FolderGit2 className="w-5 h-5 text-muted-foreground" />
                    <span>Projects</span>
                  </div>
                  <div className="ml-auto mr-4">{renderCompletionBadge('projects')}</div>
                </AccordionTrigger>
                <AccordionContent className="p-4 pt-2 bg-background">
                  {projectFields.length === 0 ? (
                    <div className="text-center py-6 border rounded-lg">
                      <p className="text-muted-foreground mb-4">No project entries yet</p>
                      <Button
                        type="button"
                        variant="outline"
                        onClick={() =>
                          appendProject({
                            title: '',
                            description: '',
                            period: '',
                            startDate: '',
                            endDate: '',
                            technologies: [],
                            highlights: [],
                            link: '',
                            image: '',
                          })
                        }
                      >
                        <Plus className="w-4 h-4 mr-2" />
                        Add Project
                      </Button>
                    </div>
                  ) : (
                    projectFields.map((field, index) => (
                      <div key={field.id} className="mb-6 p-4 border rounded-lg bg-card">
                        <div className="flex justify-between items-center mb-4">
                          <h4 className="font-semibold flex items-center gap-2">
                            <FolderGit2 className="w-4 h-4 text-muted-foreground" />
                            Project {index + 1}
                          </h4>
                          <AlertDialog>
                            <AlertDialogTrigger asChild>
                              <Button variant="destructive" size="sm">
                                <Trash2 className="w-4 h-4" />
                              </Button>
                            </AlertDialogTrigger>
                            <AlertDialogContent>
                              <AlertDialogHeader>
                                <AlertDialogTitle>Are you sure?</AlertDialogTitle>
                                <AlertDialogDescription>This action cannot be undone. This will permanently delete this project entry.</AlertDialogDescription>
                              </AlertDialogHeader>
                              <AlertDialogFooter>
                                <AlertDialogCancel>Cancel</AlertDialogCancel>
                                <AlertDialogAction onClick={() => removeProject(index)}>Delete</AlertDialogAction>
                              </AlertDialogFooter>
                            </AlertDialogContent>
                          </AlertDialog>
                        </div>

                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <FormField
                            control={form.control}
                            name={`projects.${index}.title`}
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>Project Title</FormLabel>
                                <FormControl>
                                  <Input placeholder="e.g. E-commerce Platform" {...field} />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                          <FormField
                            control={form.control}
                            name={`projects.${index}.period`}
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>Time Period</FormLabel>
                                <FormControl>
                                  <Input placeholder="e.g. 3 Months, 1 Year" {...field} />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                          <FormField
                            control={form.control}
                            name={`projects.${index}.startDate`}
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>Start Date</FormLabel>
                                <FormControl>
                                  <Input placeholder="e.g. 2022-01" {...field} />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                          <FormField
                            control={form.control}
                            name={`projects.${index}.endDate`}
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>End Date (or "Present")</FormLabel>
                                <FormControl>
                                  <Input placeholder="e.g. 2022-04" {...field} />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                          <FormField
                            control={form.control}
                            name={`projects.${index}.link`}
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>Project Link</FormLabel>
                                <FormControl>
                                  <Input placeholder="e.g. https://github.com/username/project" {...field} />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                          <FormField
                            control={form.control}
                            name={`projects.${index}.image`}
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>Image URL</FormLabel>
                                <FormControl>
                                  <Input placeholder="e.g. https://example.com/image.png" {...field} />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                        </div>

                        <FormField
                          control={form.control}
                          name={`projects.${index}.description`}
                          render={({ field }) => (
                            <FormItem className="mt-4">
                              <FormLabel>Description</FormLabel>
                              <FormControl>
                                <Textarea className="min-h-[80px]" placeholder="Briefly describe the project, its purpose, and your role" {...field} />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />

                        {/* Project Technologies */}
                        <div className="mt-4 p-3 border rounded-md">
                          <FormLabel className="mb-2 block">Technologies Used</FormLabel>
                          <div className="space-y-2">
                            {form.watch(`projects.${index}.technologies`)?.map((_: any, techIndex: Key | null | undefined) => (
                              <div key={techIndex} className="flex items-center gap-2">
                                <FormField
                                  control={form.control}
                                  name={`projects.${index}.technologies.${techIndex}`}
                                  render={({ field }) => (
                                    <FormItem className="flex-1">
                                      <FormControl>
                                        <Input placeholder="e.g. React, Node.js, MongoDB" {...field} />
                                      </FormControl>
                                    </FormItem>
                                  )}
                                />
                                <Button type="button" variant="destructive" size="sm" onClick={() => removeProjectTechnology(index, Number(techIndex))}>
                                  <Trash2 className="w-4 h-4" />
                                </Button>
                              </div>
                            ))}
                            <Button type="button" variant="outline" size="sm" onClick={() => appendProjectTechnology(index)}>
                              <Plus className="w-4 h-4 mr-2" />
                              Add Technology
                            </Button>
                          </div>
                        </div>

                        {/* Project Highlights */}
                        <div className="mt-4 p-3 border rounded-md">
                          <FormLabel className="mb-2 block">Key Features / Highlights</FormLabel>
                          <div className="space-y-2">
                            {form.watch(`projects.${index}.highlights`)?.map((_: any, highlightIndex: Key | null | undefined) => (
                              <div key={highlightIndex} className="flex items-center gap-2">
                                <FormField
                                  control={form.control}
                                  name={`projects.${index}.highlights.${highlightIndex}`}
                                  render={({ field }) => (
                                    <FormItem className="flex-1">
                                      <FormControl>
                                        <Input placeholder="e.g. Implemented user authentication system" {...field} />
                                      </FormControl>
                                    </FormItem>
                                  )}
                                />
                                <Button type="button" variant="destructive" size="sm" onClick={() => removeProjectHighlight(index, Number(highlightIndex))}>
                                  <Trash2 className="w-4 h-4" />
                                </Button>
                              </div>
                            ))}
                            <Button type="button" variant="outline" size="sm" onClick={() => appendProjectHighlight(index)}>
                              <Plus className="w-4 h-4 mr-2" />
                              Add Highlight
                            </Button>
                          </div>
                        </div>
                      </div>
                    ))
                  )}

                  {projectFields.length > 0 && (
                    <Button
                      type="button"
                      variant="outline"
                      onClick={() =>
                        appendProject({
                          title: '',
                          description: '',
                          period: '',
                          startDate: '',
                          endDate: '',
                          technologies: [],
                          highlights: [],
                          link: '',
                          image: '',
                        })
                      }
                      className="mt-4"
                    >
                      <Plus className="w-4 h-4 mr-2" />
                      Add Another Project
                    </Button>
                  )}
                </AccordionContent>
              </AccordionItem>

              {/* Certifications Section */}
              <AccordionItem value="certifications" className="border-b">
                <AccordionTrigger className="px-4 py-2 hover:bg-muted/50 data-[state=open]:bg-muted/50">
                  <div className="flex items-center gap-2">
                    <Award className="w-5 h-5 text-muted-foreground" />
                    <span>Certifications</span>
                  </div>
                  <div className="ml-auto mr-4">{renderCompletionBadge('certifications')}</div>
                </AccordionTrigger>
                <AccordionContent className="p-4 pt-2 bg-background">
                  <ListEditor
                    items={form.watch('certifications') || []}
                    addItem={appendCertification}
                    removeItem={removeCertification}
                    renderField={(index) => (
                      <FormField
                        control={form.control}
                        name={`certifications.${index}`}
                        render={({ field }) => (
                          <FormItem className="flex-1">
                            <FormControl>
                              <Input placeholder="e.g. AWS Certified Solutions Architect" {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    )}
                    emptyMessage="No certifications added yet. Add your professional certifications here."
                    addButtonLabel="Add Certification"
                  />
                </AccordionContent>
              </AccordionItem>

              {/* Additional Info Section */}
              <AccordionItem value="additionalInfo">
                <AccordionTrigger className="px-4 py-2 hover:bg-muted/50 data-[state=open]:bg-muted/50">
                  <div className="flex items-center gap-2">
                    <FileText className="w-5 h-5 text-muted-foreground" />
                    <span>Additional Information</span>
                  </div>
                  <div className="ml-auto mr-4">{renderCompletionBadge('additionalInfo')}</div>
                </AccordionTrigger>
                <AccordionContent className="p-4 pt-2 bg-background">
                  <ListEditor
                    items={form.watch('additionalInfo') || []}
                    addItem={appendAdditionalInfo}
                    removeItem={removeAdditionalInfo}
                    renderField={(index) => (
                      <FormField
                        control={form.control}
                        name={`additionalInfo.${index}`}
                        render={({ field }) => (
                          <FormItem className="flex-1">
                            <FormControl>
                              <Textarea className="min-h-[100px]" placeholder="e.g. Languages spoken, volunteer work, relevant hobbies, etc." {...field} />
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    )}
                    emptyMessage="No additional information added yet. Include any other relevant details here."
                    addButtonLabel="Add Information"
                    isTextarea={true}
                  />
                </AccordionContent>
              </AccordionItem>
            </Accordion>
          </form>
        </Form>
      </CardContent>
    </Card>
  );
}

<<< FILE END

>>> FILE START: src\components\editor\SectionHighlighter.tsx [type=tsx]
// src/components/editor/SectionHighlighter.tsx
import { useEffect, useRef } from 'react'

interface SectionHighlighterProps {
  activeSection: string | null
  previewRef: React.RefObject<HTMLDivElement>
  editorRef: React.RefObject<HTMLDivElement>
}

export function SectionHighlighter({ activeSection, previewRef, editorRef }: SectionHighlighterProps) {
  const highlightTimeoutRef = useRef<NodeJS.Timeout | null>(null)

  useEffect(() => {
    // Clear any existing highlight
    if (previewRef.current) {
      const allSections = previewRef.current.querySelectorAll('.resume-section')
      allSections.forEach(section => {
        section.classList.remove('section-active')
      })
    }

    // Apply new highlight if there's an active section
    if (activeSection && previewRef.current) {
      // Clean up previous timeout
      if (highlightTimeoutRef.current) {
        clearTimeout(highlightTimeoutRef.current)
      }

      // Find the corresponding section in the preview
      const sectionElement = previewRef.current.querySelector(`[data-section="${activeSection}"]`)

      if (sectionElement) {
        // Add active class
        sectionElement.classList.add('section-active')

        // Scroll the preview to show the section
        highlightTimeoutRef.current = setTimeout(() => {
          sectionElement.scrollIntoView({ behavior: 'smooth', block: 'nearest' })
        }, 100)
      }
    }

    return () => {
      if (highlightTimeoutRef.current) {
        clearTimeout(highlightTimeoutRef.current)
      }
    }
  }, [activeSection, previewRef])

  return null // This is a utility component with no UI
}
<<< FILE END

>>> FILE START: src\components\editor\SplitViewEditor.tsx [type=tsx]
// src/components/editor/SplitViewEditor.tsx (simplified)
import { useState, useEffect, useRef } from 'react';
import Resume from '@/components/Resume';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { ResizableHandle, ResizablePanel, ResizablePanelGroup } from '@/components/ui/resizable';
import { Button } from '@/components/ui/button';
import { Save, RotateCcw, PanelLeftClose, PanelRightClose } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from '@/components/ui/alert-dialog';
import { SectionHighlighter } from '@/components/editor/SectionHighlighter';
import { SyncScroll } from '@/components/editor/SyncScroll';
import { Switch } from '@/components/ui/switch';
import { Label } from '@/components/ui/label';
import { ResumeEditorForm } from '@/components/editor/ResumeEditorForm';
import type { ResumeData } from '@/types/resume';

// Import the schema
import { resumeSchema } from '@/types/resume';

// Define the layout modes
type LayoutMode = 'editor' | 'preview' | 'split';

interface SplitViewEditorProps {
  initialData: ResumeData;
  onSave: (data: ResumeData) => void;
}

export function SplitViewEditor({ initialData, onSave }: SplitViewEditorProps) {
  const [layoutMode, setLayoutMode] = useState<LayoutMode>('split');
  const [activeSection, setActiveSection] = useState<string | null>(null);
  const [formValues, setFormValues] = useState<ResumeData>(initialData);
  const [focusMode, setFocusMode] = useState(false);
  const [syncScrollEnabled, setSyncScrollEnabled] = useState(true);
  const { toast } = useToast();
  const [originalData] = useState<ResumeData>(initialData);

  // Refs for highlighting and scrolling
  const editorRef = useRef<HTMLDivElement>(null);
  const previewRef = useRef<HTMLDivElement>(null);

  // Set up form with zod validation
  const form = useForm<z.infer<typeof resumeSchema>>({
    resolver: zodResolver(resumeSchema),
    defaultValues: initialData,
  });

  // Watch for form changes
  useEffect(() => {
    const subscription = form.watch((value) => {
      // Update the form values for preview
      setFormValues(value as ResumeData);
    });

    return () => subscription.unsubscribe();
  }, [form.watch]);

  // Handle form submission
  const handleSubmit = (values: z.infer<typeof resumeSchema>) => {
    onSave(values as ResumeData);
  };

  // Reset form to initial values
  const handleReset = () => {
    form.reset(originalData);
    setFormValues(originalData);

    toast({
      title: 'Changes discarded',
      description: 'Your changes have been reset to the last saved version.',
    });
  };

  // Apply focus mode class if enabled and there's an active section
  useEffect(() => {
    const previewElement = previewRef.current;
    if (!previewElement) return;

    if (focusMode && activeSection) {
      previewElement.classList.add('focus-mode');
    } else {
      previewElement.classList.remove('focus-mode');
    }
  }, [focusMode, activeSection]);

  return (
    <div className="h-screen pt-14 flex flex-col">
      {/* Section highlighter and sync scroll utilities */}
      <SectionHighlighter activeSection={activeSection} previewRef={previewRef} editorRef={editorRef} />
      <SyncScroll editorRef={editorRef} previewRef={previewRef} enabled={syncScrollEnabled} />

      {/* Fixed toolbar */}
      <div className="fixed top-14 left-0 right-0 z-30 bg-background border-b p-2 flex justify-between items-center">
        <div className="flex items-center space-x-2">
          <Button variant={layoutMode === 'editor' ? 'default' : 'outline'} size="sm" onClick={() => setLayoutMode('editor')} className="flex items-center">
            <PanelLeftClose className="w-4 h-4 mr-2" />
            Editor Only
          </Button>
          <Button variant={layoutMode === 'split' ? 'default' : 'outline'} size="sm" onClick={() => setLayoutMode('split')} className="flex items-center">
            <div className="flex w-4 h-4 mr-2">
              <div className="w-2 h-4 bg-current rounded-l-sm"></div>
              <div className="w-2 h-4 bg-current opacity-50 rounded-r-sm"></div>
            </div>
            Split View
          </Button>
          <Button variant={layoutMode === 'preview' ? 'default' : 'outline'} size="sm" onClick={() => setLayoutMode('preview')} className="flex items-center">
            <PanelRightClose className="w-4 h-4 mr-2" />
            Preview Only
          </Button>
        </div>

        <div className="flex items-center space-x-4">
          {/* Focus mode toggle */}
          <div className="flex items-center space-x-2">
            <Switch id="focus-mode" checked={focusMode} onCheckedChange={setFocusMode} />
            <Label htmlFor="focus-mode" className="text-sm">
              Focus Mode
            </Label>
          </div>

          {/* Sync scroll toggle */}
          <div className="flex items-center space-x-2">
            <Switch id="sync-scroll" checked={syncScrollEnabled} onCheckedChange={setSyncScrollEnabled} />
            <Label htmlFor="sync-scroll" className="text-sm">
              Sync Scroll
            </Label>
          </div>

          <AlertDialog>
            <AlertDialogTrigger asChild>
              <Button variant="outline" size="sm">
                <RotateCcw className="w-4 h-4 mr-2" />
                Reset
              </Button>
            </AlertDialogTrigger>
            <AlertDialogContent>
              <AlertDialogHeader>
                <AlertDialogTitle>Discard changes?</AlertDialogTitle>
                <AlertDialogDescription>This will reset all your changes to the last saved version. This action cannot be undone.</AlertDialogDescription>
              </AlertDialogHeader>
              <AlertDialogFooter>
                <AlertDialogCancel>Cancel</AlertDialogCancel>
                <AlertDialogAction onClick={handleReset}>Reset</AlertDialogAction>
              </AlertDialogFooter>
            </AlertDialogContent>
          </AlertDialog>

          <Button variant="default" size="sm" onClick={form.handleSubmit(handleSubmit)}>
            <Save className="w-4 h-4 mr-2" />
            Save Changes
          </Button>
        </div>
      </div>

      {/* Resizable panels */}
      <div className="flex-1 overflow-hidden">
        <ResizablePanelGroup direction="horizontal" className="min-h-0 h-full">
          {layoutMode !== 'preview' && (
            <ResizablePanel defaultSize={layoutMode === 'editor' ? 100 : 50} minSize={layoutMode === 'editor' ? 100 : 30} className="overflow-auto pb-20">
              <div className="h-full p-4" ref={editorRef}>
                <ResumeEditorForm form={form} onSubmit={form.handleSubmit(handleSubmit)} setActiveSection={setActiveSection} />
              </div>
            </ResizablePanel>
          )}

          {layoutMode !== 'editor' && (
            <>
              {layoutMode === 'split' && <ResizableHandle withHandle />}
              <ResizablePanel defaultSize={layoutMode === 'preview' ? 100 : 50} minSize={layoutMode === 'preview' ? 100 : 30} className="overflow-auto pb-20 border-l">
                <div className="h-full p-4 flex flex-col" ref={previewRef}>
                  <div className="text-center text-xs text-muted-foreground mb-2">Live Preview {activeSection && `(Viewing: ${activeSection})`}</div>
                  <div className="flex-1 overflow-auto resume-preview">
                    <Resume data={formValues} />
                  </div>
                </div>
              </ResizablePanel>
            </>
          )}
        </ResizablePanelGroup>
      </div>
    </div>
  );
}

<<< FILE END

>>> FILE START: src\components\editor\SyncScroll.tsx [type=tsx]
// src/components/editor/SyncScroll.tsx
import { useEffect, useRef, useState } from 'react'

interface SyncScrollProps {
  editorRef: React.RefObject<HTMLDivElement>
  previewRef: React.RefObject<HTMLDivElement>
  enabled?: boolean
}

export function SyncScroll({ editorRef, previewRef, enabled = true }: SyncScrollProps) {
  const [isScrolling, setIsScrolling] = useState<'editor' | 'preview' | null>(null)
  const scrollTimeoutRef = useRef<NodeJS.Timeout | null>(null)

  useEffect(() => {
    if (!enabled) return

    const editorElement = editorRef.current
    const previewElement = previewRef.current

    if (!editorElement || !previewElement) return

    // Handler for editor scrolling
    const handleEditorScroll = () => {
      if (isScrolling === 'preview' || !enabled) return

      setIsScrolling('editor')

      // Calculate relative scroll position
      const editorScrollRatio = editorElement.scrollTop /
        (editorElement.scrollHeight - editorElement.clientHeight)

      // Apply the same ratio to preview
      const previewTargetScroll = editorScrollRatio *
        (previewElement.scrollHeight - previewElement.clientHeight)

      previewElement.scrollTop = previewTargetScroll

      // Reset scrolling state after a short delay
      if (scrollTimeoutRef.current) {
        clearTimeout(scrollTimeoutRef.current)
      }

      scrollTimeoutRef.current = setTimeout(() => {
        setIsScrolling(null)
      }, 150)
    }

    // Handler for preview scrolling
    const handlePreviewScroll = () => {
      if (isScrolling === 'editor' || !enabled) return

      setIsScrolling('preview')

      // Calculate relative scroll position
      const previewScrollRatio = previewElement.scrollTop /
        (previewElement.scrollHeight - previewElement.clientHeight)

      // Apply the same ratio to editor
      const editorTargetScroll = previewScrollRatio *
        (editorElement.scrollHeight - editorElement.clientHeight)

      editorElement.scrollTop = editorTargetScroll

      // Reset scrolling state after a short delay
      if (scrollTimeoutRef.current) {
        clearTimeout(scrollTimeoutRef.current)
      }

      scrollTimeoutRef.current = setTimeout(() => {
        setIsScrolling(null)
      }, 150)
    }

    // Add scroll event listeners
    editorElement.addEventListener('scroll', handleEditorScroll)
    previewElement.addEventListener('scroll', handlePreviewScroll)

    // Cleanup
    return () => {
      editorElement.removeEventListener('scroll', handleEditorScroll)
      previewElement.removeEventListener('scroll', handlePreviewScroll)

      if (scrollTimeoutRef.current) {
        clearTimeout(scrollTimeoutRef.current)
      }
    }
  }, [editorRef, previewRef, isScrolling, enabled])

  return null
}
<<< FILE END

>>> FILE START: src\components\ExportButton.tsx [type=tsx]
// src/components/ExportButton.tsx
import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Download, Loader2 } from 'lucide-react';
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { useToast } from '@/hooks/use-toast';

type PaperSize = 'a4' | 'letter' | 'legal';
type Orientation = 'portrait' | 'landscape';

interface PaperDimensions {
  width: number;
  height: number;
}

const paperSizes: Record<PaperSize, PaperDimensions> = {
  a4: { width: 210, height: 297 }, // mm
  letter: { width: 215.9, height: 279.4 }, // mm
  legal: { width: 215.9, height: 355.6 }, // mm
};

export const ExportButton = () => {
  const { toast } = useToast();
  const [isExporting, setIsExporting] = useState(false);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [paperSize, setPaperSize] = useState<PaperSize>('a4');
  const [orientation, setOrientation] = useState<Orientation>('portrait');
  const [includeLinks, setIncludeLinks] = useState(true);
  const [highQuality, setHighQuality] = useState(true);

  const exportToPDF = async () => {
    const resume = document.getElementById('resume-content');
    if (!resume) {
      toast({
        variant: 'destructive',
        title: 'Export failed',
        description: 'Could not find resume content to export.',
      });
      return;
    }

    setIsExporting(true);

    try {
      // Apply temporary print styles
      document.body.classList.add('print-export');

      // Determine dimensions based on paper size and orientation
      let { width, height } = paperSizes[paperSize];
      if (orientation === 'landscape') {
        [width, height] = [height, width];
      }

      // Generate canvas with appropriate settings
      const canvas = await html2canvas(resume, {
        scale: highQuality ? 2 : 1.5,
        logging: false,
        useCORS: true,
        allowTaint: !includeLinks,
        backgroundColor: '#ffffff',
      });

      // Calculate dimensions
      const imgWidth = width;
      const imgHeight = (canvas.height * imgWidth) / canvas.width;

      // Create PDF with correct orientation
      const pdf = new jsPDF(orientation, 'mm', [width, height]);

      // Add canvas as image
      pdf.addImage(canvas.toDataURL('image/png'), 'PNG', 0, 0, imgWidth, imgHeight, '', 'FAST');

      // Download the PDF
      pdf.save('resume.pdf');

      toast({
        title: 'Export successful',
        description: 'Your resume has been exported as a PDF.',
      });
    } catch (error) {
      console.error('Error generating PDF:', error);
      toast({
        variant: 'destructive',
        title: 'Export failed',
        description: 'There was an error generating your PDF. Please try again.',
      });
    } finally {
      // Remove temporary print styles
      document.body.classList.remove('print-export');
      setIsExporting(false);
      setIsDialogOpen(false);
    }
  };

  const exportToImage = async () => {
    const resume = document.getElementById('resume-content');
    if (!resume) {
      toast({
        variant: 'destructive',
        title: 'Export failed',
        description: 'Could not find resume content to export.',
      });
      return;
    }

    setIsExporting(true);

    try {
      // Apply temporary print styles
      document.body.classList.add('print-export');

      // Generate canvas
      const canvas = await html2canvas(resume, {
        scale: highQuality ? 2 : 1.5,
        logging: false,
        useCORS: true,
        backgroundColor: '#ffffff',
      });

      // Convert to image
      const image = canvas.toDataURL('image/png', 1.0);

      // Create download link
      const link = document.createElement('a');
      link.download = 'resume.png';
      link.href = image;
      link.click();

      toast({
        title: 'Export successful',
        description: 'Your resume has been exported as an image.',
      });
    } catch (error) {
      console.error('Error generating image:', error);
      toast({
        variant: 'destructive',
        title: 'Export failed',
        description: 'There was an error generating your image. Please try again.',
      });
    } finally {
      // Remove temporary print styles
      document.body.classList.remove('print-export');
      setIsExporting(false);
      setIsDialogOpen(false);
    }
  };

  return (
    <>
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button className="fixed bottom-4 right-4" variant="default">
            <Download className="w-4 h-4 mr-2" />
            Export
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent>
          <DropdownMenuLabel>Export Options</DropdownMenuLabel>
          <DropdownMenuSeparator />
          <DialogTrigger asChild onClick={() => setIsDialogOpen(true)}>
            <DropdownMenuItem>
              <Download className="w-4 h-4 mr-2" />
              Export as PDF
            </DropdownMenuItem>
          </DialogTrigger>
          <DropdownMenuItem onClick={exportToImage}>
            <Download className="w-4 h-4 mr-2" />
            Export as Image
          </DropdownMenuItem>
        </DropdownMenuContent>
      </DropdownMenu>

      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Export Resume as PDF</DialogTitle>
            <DialogDescription>Customize your export settings before downloading</DialogDescription>
          </DialogHeader>

          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-2 items-center gap-4">
              <Label htmlFor="paper-size">Paper Size</Label>
              <Select value={paperSize} onValueChange={(value: PaperSize) => setPaperSize(value)}>
                <SelectTrigger id="paper-size">
                  <SelectValue placeholder="Select paper size" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="a4">A4</SelectItem>
                  <SelectItem value="letter">Letter</SelectItem>
                  <SelectItem value="legal">Legal</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="grid grid-cols-2 items-center gap-4">
              <Label htmlFor="orientation">Orientation</Label>
              <Select value={orientation} onValueChange={(value: Orientation) => setOrientation(value)}>
                <SelectTrigger id="orientation">
                  <SelectValue placeholder="Select orientation" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="portrait">Portrait</SelectItem>
                  <SelectItem value="landscape">Landscape</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="flex items-center space-x-2">
              <Checkbox id="high-quality" checked={highQuality} onCheckedChange={(checked) => setHighQuality(!!checked)} />
              <Label htmlFor="high-quality">High quality (larger file size)</Label>
            </div>

            <div className="flex items-center space-x-2">
              <Checkbox id="include-links" checked={includeLinks} onCheckedChange={(checked) => setIncludeLinks(!!checked)} />
              <Label htmlFor="include-links">Include links (may affect formatting)</Label>
            </div>
          </div>

          <DialogFooter>
            <Button variant="outline" onClick={() => setIsDialogOpen(false)}>
              Cancel
            </Button>
            <Button onClick={exportToPDF} disabled={isExporting}>
              {isExporting ? (
                <>
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  Exporting...
                </>
              ) : (
                <>
                  <Download className="w-4 h-4 mr-2" />
                  Export PDF
                </>
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
};

<<< FILE END

>>> FILE START: src\components\resume\Education.tsx [type=tsx]
// src/components/resume/Education.tsx

import React from 'react'
import { Card, CardHeader, CardTitle, CardDescription } from "@/components/ui/card"
import { MapPin } from 'lucide-react'
import type { Education as EducationType } from '../../types/resume'

interface EducationProps {
  education: EducationType;
}

export const Education: React.FC<EducationProps> = ({ education }) => {
  return (
    <Card>
      <CardHeader>
        <CardTitle>{education.school}</CardTitle>
        <CardDescription>{education.degree}</CardDescription>
        <CardDescription className="flex items-center gap-2">
          <MapPin className="w-4 h-4" />
          {education.location}
        </CardDescription>
        <CardDescription>{education.period}</CardDescription>

        {education.achievements && education.achievements.length > 0 && (
          <div className="mt-4">
            <h4 className="font-semibold mb-2">Achievements</h4>
            <ul className="list-disc list-inside space-y-1">
              {education.achievements.map((achievement: string, i: number) => (
                <li key={i} className="text-sm text-muted-foreground">
                  {achievement}
                </li>
              ))}
            </ul>
          </div>
        )}
      </CardHeader>
    </Card>
  )
}
<<< FILE END

>>> FILE START: src\components\resume\Experience.tsx [type=tsx]
// src/components/resume/Experience.tsx
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Briefcase, MapPin, Calendar } from 'lucide-react';
import { motion } from 'framer-motion';
import type { Experience as ExperienceType } from '../../types/resume';

interface ExperienceProps {
  experience: ExperienceType;
}

export const Experience: React.FC<ExperienceProps> = ({ experience }) => {
  return (
    <Card className="mb-6 overflow-hidden transition-all duration-300 hover:shadow-lg dark:bg-dark-card dark:border-dark-border border-l-4 border-l-primary-500 dark:border-l-dark-accent">
      <CardHeader className="pb-2">
        <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-2">
          <div>
            <CardTitle className="text-xl font-bold flex items-center gap-2">
              <Briefcase className="h-5 w-5 text-primary-500 dark:text-dark-accent" />
              {experience.position}
            </CardTitle>
            <CardDescription className="text-base mt-1 flex items-center flex-wrap gap-1">
              <span className="font-medium text-primary-700 dark:text-dark-highlight">{experience.company}</span>
              {experience.location && (
                <span className="flex items-center text-muted-foreground">
                  <span className="mx-1">â€¢</span>
                  <MapPin className="h-3 w-3 mr-1" />
                  {experience.location}
                </span>
              )}
            </CardDescription>
            <CardDescription className="text-sm flex items-center mt-1 text-muted-foreground">
              <Calendar className="h-3 w-3 mr-1" />
              {experience.period}
            </CardDescription>
          </div>
        </div>
      </CardHeader>
      <CardContent>
        <ul className="space-y-2 mt-2">
          {experience.achievements.map((achievement: string, i: number) => (
            <motion.li key={i} className="pl-6 relative text-sm text-foreground dark:text-dark-text" initial={{ opacity: 0, x: -10 }} animate={{ opacity: 1, x: 0 }} transition={{ delay: i * 0.1 }}>
              <span className="absolute left-0 top-2 w-3 h-3 bg-primary-200 dark:bg-dark-muted rounded-full"></span>
              <span className="absolute left-1.5 top-2 w-1 h-1 bg-primary-500 dark:bg-dark-accent rounded-full"></span>
              {achievement}
            </motion.li>
          ))}
        </ul>

        {experience.technologies && experience.technologies.length > 0 && (
          <div className="flex flex-wrap gap-2 mt-4 pt-4 border-t border-gray-100 dark:border-dark-border">
            {experience.technologies.map((tech: string, i: number) => (
              <Badge
                key={i}
                variant="secondary"
                className="bg-primary-100 text-primary-800 dark:bg-dark-muted/30 dark:text-dark-highlight hover:bg-primary-200 dark:hover:bg-dark-muted/50 transition-colors"
              >
                {tech}
              </Badge>
            ))}
          </div>
        )}
      </CardContent>
    </Card>
  );
};

<<< FILE END

>>> FILE START: src\components\resume\GithubProjects.tsx [type=tsx]
// src/components/resume/GitHubProjects.tsx
import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui';
import { Badge } from '@/components/ui';
import { Button } from '@/components/ui';
import { FadeIn } from '@/components/animations/fade-in';
import { Star, GitFork, ExternalLink, Github, Clock } from 'lucide-react';
import { fetchUserRepos, GithubRepo } from '@/services/github';
import { formatDistanceToNow } from 'date-fns';

interface GitHubProjectsProps {
  username: string;
  count?: number;
}
const githubUsername = import.meta.env.GITHUB_TOKEN || 'default-username';


export function GitHubProjects({ username, count = 6 }: GitHubProjectsProps) {
  const [repos, setRepos] = useState<GithubRepo[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    async function loadRepos() {
      try {
        setIsLoading(true);
        const data = await fetchUserRepos(username, count);
        setRepos(data);
        setError(null);
      } catch (err) {
        setError('Failed to load GitHub projects');
        console.error(err);
      } finally {
        setIsLoading(false);
      }
    }

    loadRepos();
  }, [username, count]);

  if (isLoading) {
    return (
      <div className="text-center p-8">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto"></div>
        <p className="mt-2 text-muted-foreground">Loading GitHub projects...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-center p-8 text-destructive">
        <p>{error}</p>
        <Button variant="outline" className="mt-4" onClick={() => window.open(`https://github.com/${username}`, '_blank')}>
          <Github className="w-4 h-4 mr-2" />
          Visit GitHub Profile
        </Button>
      </div>
    );
  }

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
      {repos.map((repo, index) => (
        <FadeIn key={repo.id} delay={index * 0.1}>
          <Card className="h-full flex flex-col">
            <CardHeader>
              <CardTitle className="flex items-start justify-between text-xl">
                <span>{repo.name}</span>
                <div className="flex items-center text-sm text-muted-foreground">
                  <Star className="w-4 h-4 mr-1" />
                  <span>{repo.stargazers_count}</span>
                </div>
              </CardTitle>
              <div className="flex items-center text-xs text-muted-foreground">
                <Clock className="w-3 h-3 mr-1" />
                <span>Updated {formatDistanceToNow(new Date(repo.updated_at))} ago</span>
              </div>
            </CardHeader>

            <CardContent className="flex-1 flex flex-col">
              <p className="text-sm text-muted-foreground mb-4 flex-1">{repo.description || 'No description provided'}</p>

              {repo.language && (
                <div className="mb-3">
                  <Badge variant="secondary">{repo.language}</Badge>
                </div>
              )}

              <div className="flex gap-2 mt-auto">
                <Button variant="outline" size="sm" asChild>
                  <a href={repo.html_url} target="_blank" rel="noopener noreferrer">
                    <Github className="w-4 h-4 mr-2" />
                    Code
                  </a>
                </Button>
                {repo.homepage && (
                  <Button variant="outline" size="sm" asChild>
                    <a href={repo.homepage} target="_blank" rel="noopener noreferrer">
                      <ExternalLink className="w-4 h-4 mr-2" />
                      Demo
                    </a>
                  </Button>
                )}
              </div>
            </CardContent>
          </Card>
        </FadeIn>
      ))}

      <div className="col-span-1 md:col-span-2 text-center mt-4">
        <Button variant="outline" asChild>
          <a href={`https://github.com/${username}`} target="_blank" rel="noopener noreferrer">
            <Github className="w-4 h-4 mr-2" />
            View All Projects on GitHub
          </a>
        </Button>
      </div>
    </div>
  );
}

<<< FILE END

>>> FILE START: src\components\resume\HeroSection.tsx [type=tsx]
// src/components/resume/HeroSection.tsx
import { motion } from 'framer-motion';
import { ArrowDown } from 'lucide-react';
import { getInitials } from '@/lib/resume-utils';
import type { Profile } from '@/types/resume';

interface HeroSectionProps {
  profile: Profile;
}

export function HeroSection({ profile }: HeroSectionProps) {
  return (
    <div className="relative h-[60vh] min-h-[400px] w-full flex items-center justify-center overflow-hidden mb-12">
      {/* Background with subtle pattern */}
      <div className="absolute inset-0 bg-gradient-to-br from-primary-50/30 via-background to-primary-50/10 dark:from-primary-950/30 dark:to-background">
        <div
          className="absolute inset-0 opacity-20"
          style={{
            backgroundImage:
              "url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%239C92AC' fill-opacity='0.1'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E\")",
          }}
        ></div>
      </div>

      <div className="container max-w-5xl mx-auto px-4 relative z-10">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8 items-center">
          <motion.div initial={{ opacity: 0, x: -20 }} animate={{ opacity: 1, x: 0 }} transition={{ duration: 0.7 }} className="text-left">
            <h1 className="text-4xl sm:text-5xl lg:text-6xl font-bold mb-4 tracking-tight">
              {profile.name.split(' ').map((part, i) => (
                <span key={i} className="block">
                  {i === 0 && <span className="text-primary-500">Hi, I'm </span>}
                  {part}
                </span>
              ))}
            </h1>
            <h2 className="text-2xl sm:text-3xl text-muted-foreground mb-6">{profile.title}</h2>
            <p className="text-lg max-w-md leading-relaxed mb-8">{profile.bio.split('.')[0]}.</p>

            <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.4, duration: 0.5 }} className="flex flex-wrap gap-3">
              <a href="#resume-content" className="px-6 py-3 bg-primary-500 hover:bg-primary-600 text-white rounded-md transition-all shadow-lg hover:shadow-primary-500/25 flex items-center gap-2">
                View Resume <ArrowDown className="w-4 h-4" />
              </a>

              <a
                href={`mailto:${profile.email}`}
                className="px-6 py-3 bg-transparent border border-primary-500 text-primary-600 dark:text-primary-400 hover:bg-primary-50 dark:hover:bg-primary-900/20 rounded-md transition-all"
              >
                Contact Me
              </a>
            </motion.div>
          </motion.div>

          <motion.div initial={{ opacity: 0, scale: 0.9 }} animate={{ opacity: 1, scale: 1 }} transition={{ delay: 0.2, duration: 0.7 }} className="hidden md:flex justify-center">
            <div className="relative w-64 h-64 lg:w-80 lg:h-80">
              {profile.avatar ? (
                <div className="w-full h-full rounded-full overflow-hidden border-4 border-primary-200 dark:border-primary-800 shadow-2xl">
                  <img src={profile.avatar} alt={profile.name} className="w-full h-full object-cover" />
                </div>
              ) : (
                <div className="w-full h-full rounded-full bg-gradient-to-br from-primary-400 to-primary-600 flex items-center justify-center border-4 border-primary-200 dark:border-primary-800 shadow-2xl">
                  <span className="text-7xl font-bold text-white">{getInitials(profile.name)}</span>
                </div>
              )}

              {/* Decorative elements */}
              <div className="absolute -top-4 -right-4 w-20 h-20 rounded-full bg-secondary-500/20 blur-xl"></div>
              <div className="absolute -bottom-6 -left-6 w-24 h-24 rounded-full bg-primary-500/20 blur-xl"></div>
            </div>
          </motion.div>
        </div>
      </div>

      <div className="absolute bottom-8 left-1/2 transform -translate-x-1/2 animate-bounce">
        <ArrowDown className="w-6 h-6 text-primary-500" />
      </div>
    </div>
  );
}

<<< FILE END

>>> FILE START: src\components\resume\ModernSkillsCard.tsx [type=tsx]
// src/components/resume/ModernSkillsCard.tsx
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui';
import { motion } from 'framer-motion';
import type { Skill } from '@/types/resume';
import { LucideIcon } from 'lucide-react';

interface SkillCardProps {
  title: string;
  skills: Skill[];
  icon: LucideIcon;
}

export function ModernSkillsCard({ title, skills, icon: Icon }: SkillCardProps) {
  return (
    <Card className="overflow-hidden transition-all duration-300 hover:shadow-lg">
      <CardHeader className="pb-3 bg-gradient-to-r from-primary-500/10 to-transparent">
        <CardTitle className="flex items-center gap-2">
          <Icon className="w-5 h-5 text-primary-500" />
          {title}
        </CardTitle>
      </CardHeader>

      <CardContent className="pt-4 grid gap-4">
        {skills.map((skill, index) => (
          <motion.div key={skill.name} initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: index * 0.1, duration: 0.3 }} className="relative">
            <div className="flex justify-between items-center mb-1">
              <span className="font-medium text-sm">{skill.name}</span>
              {skill.experience && <span className="text-xs text-muted-foreground">{skill.experience}</span>}
            </div>

            {typeof skill.level === 'number' && (
              <div className="h-2 w-full bg-secondary-100 dark:bg-secondary-900/40 rounded-full overflow-hidden">
                <motion.div
                  className="h-full bg-gradient-to-r from-primary-400 to-primary-600"
                  initial={{ width: 0 }}
                  animate={{ width: `${skill.level}%` }}
                  transition={{ duration: 1, delay: 0.2 + index * 0.1, ease: 'easeOut' }}
                />
              </div>
            )}
          </motion.div>
        ))}
      </CardContent>
    </Card>
  );
}

<<< FILE END

>>> FILE START: src\components\resume\Profile.tsx [type=tsx]
import React from 'react'
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Mail, Github, Linkedin, Globe } from 'lucide-react'
import type { Profile as ProfileType } from '@/types/resume'

interface ProfileProps {
  data: ProfileType
}

export const Profile: React.FC<ProfileProps> = ({ data }) => {
const getInitials = (name: string) => {
  if (!name) return '';
  return name
    .split(' ')
    .map((n) => n[0])
    .join('')
    .toUpperCase();
};

  return (
    <Card>
      <CardContent className="p-6">
        <div className="flex flex-col md:flex-row items-center gap-6">
          <Avatar className="w-24 h-24 border-2 border-primary">
            <AvatarImage src={data.avatar} alt={data.name} />
            <AvatarFallback>{getInitials(data.name)}</AvatarFallback>
          </Avatar>

          <div className="space-y-4 text-center md:text-left flex-1">
            <div>
              <h1 className="text-2xl font-bold">{data.name}</h1>
              <p className="text-muted-foreground">{data.title}</p>
              <p className="text-sm text-muted-foreground">{data.location}</p>
            </div>

            <div className="flex flex-wrap gap-2 justify-center md:justify-start">
              <Button variant="outline" size="sm" asChild>
                <a href={`mailto:${data.email}`}>
                  <Mail className="w-4 h-4 mr-2" />
                  Email
                </a>
              </Button>

              {data.links.github && (
                <Button variant="outline" size="sm" asChild>
                  <a href={`https://${data.links.github}`} target="_blank" rel="noopener noreferrer">
                    <Github className="w-4 h-4 mr-2" />
                    GitHub
                  </a>
                </Button>
              )}

              {data.links.linkedin && (
                <Button variant="outline" size="sm" asChild>
                  <a href={`https://${data.links.linkedin}`} target="_blank" rel="noopener noreferrer">
                    <Linkedin className="w-4 h-4 mr-2" />
                    LinkedIn
                  </a>
                </Button>
              )}

              {data.links.website && (
                <Button variant="outline" size="sm" asChild>
                  <a href={`https://${data.links.website}`} target="_blank" rel="noopener noreferrer">
                    <Globe className="w-4 h-4 mr-2" />
                    Website
                  </a>
                </Button>
              )}
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  )
}
<<< FILE END

>>> FILE START: src\components\resume\ProjectGallery.tsx [type=tsx]
// src/components/resume/ProjectGallery.tsx
import React, { useState } from 'react'
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle
} from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { ScaleIn } from "@/components/animations/scale-in"
import { ExternalLink, Github } from 'lucide-react'
import { motion } from 'framer-motion'
import type { Project } from '../../types/resume'

interface ProjectGalleryProps {
  projects: Project[]
}

export const ProjectGallery: React.FC<ProjectGalleryProps> = ({ projects }) => {
  const [selectedProject, setSelectedProject] = useState<Project | null>(null)

  return (
    <>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {projects.map((project, index) => (
          <ScaleIn key={project.title} delay={index * 0.1}>
            <Card
              className="cursor-pointer hover:shadow-lg transition-all"
              onClick={() => setSelectedProject(project)}
            >
              {project.image && (
                <div className="relative h-48 overflow-hidden rounded-t-lg">
                  <img
                    src={project.image}
                    alt={project.title}
                    className="object-cover w-full h-full"
                  />
                </div>
              )}
              <CardHeader>
                <CardTitle>{project.title}</CardTitle>
                <CardDescription>{project.period}</CardDescription>
              </CardHeader>
              <CardContent>
                <p className="text-sm text-muted-foreground mb-4">
                  {project.description}
                </p>
                <div className="flex flex-wrap gap-1">
                  {project.technologies.map((tech, i) => (
                    <Badge key={i} variant="secondary">
                      {tech}
                    </Badge>
                  ))}
                </div>
              </CardContent>
            </Card>
          </ScaleIn>
        ))}
      </div>

      <Dialog open={!!selectedProject} onOpenChange={() => setSelectedProject(null)}>
        {selectedProject && (
          <DialogContent className="max-w-2xl">
            <DialogHeader>
              <DialogTitle>{selectedProject.title}</DialogTitle>
              <DialogDescription>{selectedProject.period}</DialogDescription>
            </DialogHeader>

            {selectedProject.image && (
              <div className="relative h-64 overflow-hidden rounded-lg">
                <img
                  src={selectedProject.image}
                  alt={selectedProject.title}
                  className="object-cover w-full h-full"
                />
              </div>
            )}

            <div className="space-y-4">
              <p className="text-muted-foreground">
                {selectedProject.description}
              </p>

              <div>
                <h4 className="font-semibold mb-2">Key Features:</h4>
                <ul className="list-disc list-inside space-y-1">
                  {selectedProject.highlights.map((highlight, i) => (
                    <motion.li
                      key={i}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: i * 0.1 }}
                      className="text-sm text-muted-foreground"
                    >
                      {highlight}
                    </motion.li>
                  ))}
                </ul>
              </div>

              <div>
                <h4 className="font-semibold mb-2">Technologies Used:</h4>
                <div className="flex flex-wrap gap-2">
                  {selectedProject.technologies.map((tech, i) => (
                    <Badge key={i} variant="secondary">
                      {tech}
                    </Badge>
                  ))}
                </div>
              </div>

              {selectedProject.link && (
                <div className="flex gap-2 pt-4">
                  <Button asChild>
                    <a href={selectedProject.link} target="_blank" rel="noopener noreferrer">
                      <ExternalLink className="w-4 h-4 mr-2" />
                      View Project
                    </a>
                  </Button>
                  {selectedProject.link.includes('github') && (
                    <Button variant="outline" asChild>
                      <a href={selectedProject.link} target="_blank" rel="noopener noreferrer">
                        <Github className="w-4 h-4 mr-2" />
                        View Code
                      </a>
                    </Button>
                  )}
                </div>
              )}
            </div>
          </DialogContent>
        )}
      </Dialog>
    </>
  )
}
<<< FILE END

>>> FILE START: src\components\resume\Projects.tsx [type=tsx]
import React from 'react'
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { ExternalLink, Calendar } from 'lucide-react'
import type { Project } from '@/types/resume'

interface ProjectsProps {
  data: Project[]
}

export const Projects: React.FC<ProjectsProps> = ({ data }) => {
  const formatDate = (dateString: string) => {
    const date = new Date(dateString)
    return date.toLocaleDateString('en-US', { month: 'short', year: 'numeric' })
  }

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
      {data.map((project, index) => (
        <Card key={index} className="group hover:shadow-lg transition-shadow">
          <CardHeader>
            <div className="flex items-start justify-between">
              <div>
                <CardTitle className="text-xl flex items-center gap-2">
                  {project.title}
                  {project.link && (
                    <Button variant="ghost" size="sm" className="p-0" asChild>
                      <a
                        href={`https://${project.link}`}
                        target="_blank"
                        rel="noopener noreferrer"
                      >
                        <ExternalLink className="w-4 h-4" />
                      </a>
                    </Button>
                  )}
                </CardTitle>
                <CardDescription className="flex items-center gap-2 mt-1">
                  <Calendar className="w-4 h-4" />
                  <span>
                    {formatDate(project.startDate)}
                    {project.endDate && ` - ${formatDate(project.endDate)}`}
                  </span>
                </CardDescription>
              </div>
            </div>
          </CardHeader>

          <CardContent className="space-y-4">
            <p className="text-sm text-muted-foreground">
              {project.description}
            </p>

            {project.highlights.length > 0 && (
              <div className="space-y-2">
                <h4 className="text-sm font-semibold">Key Features:</h4>
                <ul className="list-disc list-inside space-y-1">
                  {project.highlights.map((highlight, i) => (
                    <li key={i} className="text-sm text-muted-foreground">
                      {highlight}
                    </li>
                  ))}
                </ul>
              </div>
            )}

            <div className="flex flex-wrap gap-2 pt-2">
              {project.technologies.map((tech, i) => (
                <Badge key={i} variant="secondary">
                  {tech}
                </Badge>
              ))}
            </div>

            {project.image && (
              <div className="mt-4">
                <img
                  src={project.image}
                  alt={project.title}
                  className="rounded-md w-full h-48 object-cover"
                />
              </div>
            )}
          </CardContent>
        </Card>
      ))}
    </div>
  )
}
<<< FILE END

>>> FILE START: src\components\resume\Skills.tsx [type=tsx]
// src/components/resume/Skills.tsx

import React from 'react'
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Progress } from "@/components/ui/progress"
import type { Skill } from '../../types/resume'
import { LucideIcon } from 'lucide-react'
import { motion } from 'framer-motion'

interface SkillCategoryProps {
  title: string;
  skills: Skill[];
  icon: LucideIcon;
}

export const SkillCategory: React.FC<SkillCategoryProps> = ({
  title,
  skills,
  icon: Icon
}) => {
  return (
    <Card className="col-span-1">
      <CardHeader>
        <div className="flex items-center gap-2">
          <Icon className="w-5 h-5" />
          <CardTitle>{title}</CardTitle>
        </div>
      </CardHeader>
      <CardContent className="space-y-4">
        {skills.map((skill, index) => (
          <motion.div
            key={index}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: index * 0.1 }}
            className="space-y-1.5"
          >
            <div className="flex justify-between">
              <span className="text-sm font-medium">{skill.name}</span>
              {skill.experience ? (
                <span className="text-sm text-muted-foreground">
                  {skill.experience}
                </span>
              ) : (
                <span className="text-sm text-muted-foreground">
                  {skill.level}%
                </span>
              )}
            </div>
            {skill.level && <Progress value={skill.level} className="h-2" />}
          </motion.div>
        ))}
      </CardContent>
    </Card>
  )
}
<<< FILE END

>>> FILE START: src\components\resume\Timeline.tsx [type=tsx]
// src/components/resume/Timeline.tsx
import React from 'react'
import { Card, CardContent } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { motion } from "framer-motion"
import { FadeIn } from "@/components/animations/fade-in"
import type { Experience } from '@/types/resume'

interface TimelineProps {
  experiences: Experience[]
}

export const Timeline: React.FC<TimelineProps> = ({ experiences }) => {
  const sortedExperiences = [...experiences].sort((a, b) => {
    return new Date(b.period.split(" to ")[0]).getTime() -
           new Date(a.period.split(" to ")[0]).getTime()
  })

  return (
    <div className="relative container max-w-3xl">
      {/* Timeline line */}
      <div className="absolute left-1/2 transform -translate-x-1/2 w-0.5 h-full bg-border" />

      {/* Timeline items */}
      <div className="space-y-12">
        {sortedExperiences.map((experience, index) => (
          <FadeIn
            key={index}
            delay={index * 0.2}
            direction={index % 2 === 0 ? "left" : "right"}
          >
            <div className={`flex items-center justify-${index % 2 === 0 ? 'end' : 'start'} w-full`}>
              <div className={`w-5/12 ${index % 2 === 0 ? 'text-right pr-8' : 'text-left pl-8'}`}>
                <Card className="relative hover:shadow-lg transition-shadow">
                  {/* Timeline dot */}
                  <div className="absolute top-1/2 transform -translate-y-1/2 w-4 h-4 rounded-full bg-primary border-4 border-background"
                       style={{
                         [index % 2 === 0 ? 'right' : 'left']: '-2rem'
                       }}
                  />

                  <CardContent className="p-4">
                    <motion.div
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      transition={{ delay: index * 0.3 }}
                    >
                      <h3 className="font-bold">{experience.position}</h3>
                      <p className="text-sm text-muted-foreground">{experience.company}</p>
                      <p className="text-sm text-muted-foreground">{experience.period}</p>

                      <div className="mt-2 space-y-1">
                        {experience.achievements.slice(0, 2).map((achievement, i) => (
                          <p key={i} className="text-sm">
                            {achievement}
                          </p>
                        ))}
                      </div>

                      {experience.technologies && (
                        <div className="flex flex-wrap gap-1 mt-2">
                          {experience.technologies.slice(0, 3).map((tech, i) => (
                            <Badge key={i} variant="secondary" className="text-xs">
                              {tech}
                            </Badge>
                          ))}
                        </div>
                      )}
                    </motion.div>
                  </CardContent>
                </Card>
              </div>
            </div>
          </FadeIn>
        ))}
      </div>
    </div>
  )
}
<<< FILE END

>>> FILE START: src\components\Resume.tsx [type=tsx]
// src/components/Resume.tsx
import React from 'react';
import { Card, CardContent } from '@/components/ui';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui';
import { Briefcase, GraduationCap, Code, MessageSquare, FolderGit2, Github, Server, Database, BarChart, Cloud, Sun, Moon } from 'lucide-react';
import { ProjectGallery } from './resume/ProjectGallery';
import { ContactForm } from './contact/ContactForm';
import { Education } from './resume/Education';
import { HeroSection } from './resume/HeroSection';
import { FadeIn } from './animations/fade-in';
import { Experience } from './resume/Experience';
import { useTheme } from '@/components/theme/ThemeProvider';
import { Button } from '@/components/ui/button';
import type { ResumeData } from '@/types/resume';
import { GitHubProjects } from './resume/GithubProjects';
import { ModernSkillsCard } from './resume/ModernSkillsCard';

interface ResumeProps {
  data: ResumeData;
}

const githubUsername = import.meta.env.GITHUB_USERNAME || 'terrib1e';

const Resume: React.FC<ResumeProps> = ({ data }) => {
  const { theme, setTheme } = useTheme();

  const toggleTheme = () => {
    setTheme(theme === 'dark' ? 'light' : 'dark');
  };

  return (
    <div className="min-h-screen bg-background dark:bg-dark-bg" id="resume-main">
      {/* Theme Toggle */}
      <Button variant="outline" size="icon" className="fixed top-4 right-4 z-50 rounded-full w-10 h-10 bg-background/80 backdrop-blur-sm" onClick={toggleTheme}>
        {theme === 'dark' ? <Sun className="h-4 w-4" /> : <Moon className="h-4 w-4" />}
        <span className="sr-only">Toggle theme</span>
      </Button>

      {/* Hero Section */}
      <HeroSection profile={data.profile} />

      {/* Main Content */}
      <div className="container max-w-5xl mx-auto px-6 py-12">
        <Card className="shadow-lg transition-all duration-300 hover:shadow-xl border-none overflow-hidden">
          <CardContent className="p-0">
            <Tabs defaultValue="experience" className="w-full">
              <div className="bg-primary-50 dark:bg-gray-800 border-b px-4 py-2">
                <TabsList className="grid w-full grid-cols-3 md:grid-cols-6 gap-1 bg-muted/50">
                  <TabsTrigger value="experience" className="data-[state=active]:bg-white dark:data-[state=active]:bg-blue-600">
                    <Briefcase className="w-4 h-4 mr-2" />
                    <span className="hidden md:inline">Experience</span>
                    <span className="inline md:hidden">Work</span>
                  </TabsTrigger>
                  <TabsTrigger value="skills" className="data-[state=active]:bg-white dark:data-[state=active]:bg-blue-600">
                    <Code className="w-4 h-4 mr-2" />
                    <span>Skills</span>
                  </TabsTrigger>
                  <TabsTrigger value="education" className="data-[state=active]:bg-white dark:data-[state=active]:bg-blue-600">
                    <GraduationCap className="w-4 h-4 mr-2" />
                    <span className="hidden md:inline">Education</span>
                    <span className="inline md:hidden">Edu</span>
                  </TabsTrigger>
                  <TabsTrigger value="projects" className="data-[state=active]:bg-white dark:data-[state=active]:bg-blue-600">
                    <FolderGit2 className="w-4 h-4 mr-2" />
                    <span>Projects</span>
                  </TabsTrigger>
                  <TabsTrigger value="github" className="data-[state=active]:bg-white dark:data-[state=active]:bg-blue-600">
                    <Github className="w-4 h-4 mr-2" />
                    <span>GitHub</span>
                  </TabsTrigger>
                  <TabsTrigger value="contact" className="data-[state=active]:bg-white dark:data-[state=active]:bg-blue-600">
                    <MessageSquare className="w-4 h-4 mr-2" />
                    <span>Contact</span>
                  </TabsTrigger>
                </TabsList>
              </div>

              {/* Tab contents */}
              <div className="p-6">
                {/* Experience Tab */}
                <TabsContent value="experience" className="mt-0 animate-fade-in">
                  <h2 className="text-2xl font-bold mb-6 text-primary-700 dark:text-blue-300">Professional Experience</h2>
                  <div className="space-y-6">
                    {data.experience.map((exp, index) => (
                      <div key={index} className="animate-slide-up" style={{ animationDelay: `${index * 100}ms` }}>
                        <Experience experience={exp} />
                      </div>
                    ))}
                  </div>
                </TabsContent>

                {/* Skills Tab */}
                <TabsContent value="skills" className="mt-0 animate-fade-in">
                  <h2 className="text-2xl font-bold mb-6 text-primary-700 dark:text-blue-300">Technical Skills</h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    <ModernSkillsCard title="Frontend" skills={data.skills.frontend} icon={Code} />
                    <ModernSkillsCard title="Backend" skills={data.skills.backend} icon={Server} />
                    {data.skills.cloud && <ModernSkillsCard title="Cloud" skills={data.skills.cloud} icon={Cloud} />}
                    {data.skills.databases && <ModernSkillsCard title="Databases" skills={data.skills.databases} icon={Database} />}
                    {data.skills.analytics && <ModernSkillsCard title="Analytics" skills={data.skills.analytics} icon={BarChart} />}
                  </div>
                </TabsContent>

                {/* Education Tab */}
                <TabsContent value="education" className="mt-0 animate-fade-in">
                  <h2 className="text-2xl font-bold mb-6 text-primary-700 dark:text-blue-300">Education & Certifications</h2>
                  <div className="space-y-6">
                    {data.education.map((edu, index) => (
                      <FadeIn key={index} delay={index * 0.1}>
                        <Education education={edu} />
                      </FadeIn>
                    ))}

                    {data.certifications && data.certifications.length > 0 && (
                      <div className="mt-10">
                        <h3 className="text-xl font-semibold mb-4 text-primary-600 dark:text-blue-400">Certifications</h3>
                        <Card className="shadow-sm">
                          <CardContent className="p-6">
                            <ul className="space-y-2">
                              {data.certifications.map((cert, index) => (
                                <li key={index} className="flex items-start">
                                  <div className="flex-shrink-0 mt-1">
                                    <svg className="w-5 h-5 text-primary-500 dark:text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                    </svg>
                                  </div>
                                  <span className="ml-3">{cert}</span>
                                </li>
                              ))}
                            </ul>
                          </CardContent>
                        </Card>
                      </div>
                    )}
                  </div>
                </TabsContent>

                {/* Projects Tab */}
                <TabsContent value="projects" className="mt-0 animate-fade-in">
                  <h2 className="text-2xl font-bold mb-6 text-primary-700 dark:text-blue-300">Featured Projects</h2>
                  <ProjectGallery projects={data.projects || []} />
                </TabsContent>

                {/* GitHub Tab */}
                <TabsContent value="github" className="mt-0 animate-fade-in">
                  <h2 className="text-2xl font-bold mb-6 text-primary-700 dark:text-blue-300">GitHub Repositories</h2>
                  <GitHubProjects username={githubUsername} count={6} />
                </TabsContent>

                {/* Contact Tab */}
                <TabsContent value="contact" className="mt-0 animate-fade-in">
                  <h2 className="text-2xl font-bold mb-6 text-primary-700 dark:text-blue-300">Get In Touch</h2>
                  <div className="max-w-2xl mx-auto">
                    <ContactForm />
                  </div>
                </TabsContent>
              </div>
            </Tabs>
          </CardContent>
        </Card>
      </div>

      {/* Footer */}
      <footer className="py-6 bg-primary-800 dark:bg-gray-900 text-white/80 text-center mt-12">
        <div className="container mx-auto px-6">
          <p>
            Â© {new Date().getFullYear()} {data.profile.name}. All rights reserved.
          </p>
          <div className="flex justify-center gap-4 mt-3">
            {data.profile.links?.github && (
              <a href={`https://github.com/${data.profile.links.github}`} target="_blank" rel="noopener noreferrer" className="text-white/70 hover:text-white transition-colors">
                <Github className="w-5 h-5" />
              </a>
            )}
            {data.profile.links?.linkedin && (
              <a href={`https://linkedin.com/in/${data.profile.links.linkedin}`} target="_blank" rel="noopener noreferrer" className="text-white/70 hover:text-white transition-colors">
                <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z" />
                </svg>
              </a>
            )}
            {data.profile.links?.website && (
              <a href={`https://${data.profile.links.website}`} target="_blank" rel="noopener noreferrer" className="text-white/70 hover:text-white transition-colors">
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9"
                  />
                </svg>
              </a>
            )}
          </div>
        </div>
      </footer>
    </div>
  );
};

export default Resume;

<<< FILE END

>>> FILE START: src\components\theme\ThemeProvider.tsx [type=tsx]
// src/components/theme/ThemeProvider.tsx
import { createContext, useContext, useEffect, useState } from "react"

type Theme = "dark" | "light" | "system"

type ThemeProviderProps = {
  children: React.ReactNode
  defaultTheme?: Theme
  storageKey?: string
}

type ThemeProviderState = {
  theme: Theme
  setTheme: (theme: Theme) => void
}

const ThemeProviderContext = createContext<ThemeProviderState | undefined>(undefined)

export function ThemeProvider({
  children,
  defaultTheme = "system",
  storageKey = "vite-ui-theme",
  ...props
}: ThemeProviderProps) {
  const [theme, setTheme] = useState<Theme>(
    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme
  )

  useEffect(() => {
    const root = window.document.documentElement

    root.classList.remove("light", "dark")

    if (theme === "system") {
      const systemTheme = window.matchMedia("(prefers-color-scheme: dark)")
        .matches
        ? "dark"
        : "light"

      root.classList.add(systemTheme)
      return
    }

    root.classList.add(theme)
  }, [theme])

  const value = {
    theme,
    setTheme: (theme: Theme) => {
      localStorage.setItem(storageKey, theme)
      setTheme(theme)
    },
  }

  return (
    <ThemeProviderContext.Provider {...props} value={value}>
      {children}
    </ThemeProviderContext.Provider>
  )
}

export const useTheme = () => {
  const context = useContext(ThemeProviderContext)

  if (context === undefined)
    throw new Error("useTheme must be used within a ThemeProvider")

  return context
}
<<< FILE END

>>> FILE START: src\components\theme\ThemeToggle.tsx [type=tsx]
  // src/components/theme/ThemeToggle.tsx
  import { Moon, Sun } from "lucide-react"
  import { Button } from "@/components/ui/button"
  import { useTheme } from "./ThemeProvider"

  export function ThemeToggle() {
    const { theme, setTheme } = useTheme()

    const toggleTheme = () => {
      setTheme(theme === "dark" ? "light" : "dark")
    }

    return (
      <Button
        variant="outline"
        size="icon"
        className="fixed top-4 right-4"
        onClick={toggleTheme}
      >
        <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
        <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
        <span className="sr-only">Toggle theme</span>
      </Button>
    )
  }
<<< FILE END

>>> FILE START: src\data\resumeData.ts [type=ts]
// src/data/resumeData.ts

export const resumeData = {
    profile: {
      name: "Elijah Clark",
      title: "Full Stack Engineer",
      location: "Albany, NY 12210",
      email: "elijahclark@protonmail.com",
      phone: "+1 518 728 2461",
      bio: "Passionate and versatile Full Stack Engineer with 10+ years of experience developing and maintaining diverse applications. Skilled in frontend and backend technologies, cloud services, and database management. Proven track record in leading projects, mentoring teams, and delivering scalable, maintainable solutions.",
      avatar: "/api/placeholder/400/400",
      links: {
        github: "terrib1e",
        linkedin: ""
      }
    },

    experience: [
      {
        company: "Maximus",
        position: "Software Engineer",
        location: "Albany, NY",
        period: "February 2017 to Present",
        achievements: [
          "Designed and implemented automated provisioning tool for employee access management",
          "Developed multiple dashboards used to monitor application security, visualize agile metrics, and track releases",
          "Created internal tooling for patient documentation uploads, migrating from on-premises to cloud solutions",
          "Developed IVRs using AWS Connect, Lambda functions, and SpringBoot, integrating with backend servers for user verification and task creation",
          "Utilized ELK stack to create dashboards for application and server performance monitoring",
          "Provided technical guidance and development assistance across various teams and phases of software development",
          "Led migration of legacy systems to microservices architecture, improving scalability and reducing deployment time by 40%"
        ]
      },
      {
        company: "Conatus Intalytics",
        position: "Founder",
        period: "January 2018 to Present",
        achievements: [
          "Financial modeling services to commercial real estate professionals using Excel, Smartsheet, and Google Sheets",
          "Conduct in-depth research, lead generation, and process automation to streamline client businesses",
          "Developed custom Python scripts to automate data analysis, reducing manual work by 50%",
          "Developed financial models that assisted in the purchasing of more than $30 million worth of properties"
        ]
      },
      {
        company: "Maximus",
        position: "IT PM Senior Analyst",
        location: "Albany, NY",
        period: "Jan 2015 to Jan 2017",
        achievements: [
          "Worked with the ISSO to analyze and mitigate system vulnerabilities using Qualys",
          "Created dashboards in Power Bi that automatically pull vulnerability data from Qualys",
          "Created IT Applications Staffing Database for tracking and management of staff members",
          "Researched and recommended process improvements to mitigate operational and financial risk",
          "Created and Implemented incident reporting form for facilities security (SecTek)",
          "Served as IT Applications Project Lead on multiple key projects"
        ]
      }
    ],

    skills: {
      frontend: [
        { name: "JavaScript", experience: "6 years" },
        { name: "Angular", level: 85 },
        { name: "Node.js", level: 85 },
        { name: "Flutter", level: 80 },
        { name: "React", level: 80 }
      ],
      backend: [
        { name: "Java (8-17)", level: 90 },
        { name: "Spring Boot", level: 85 },
        { name: "Python", level: 85 },
        { name: "Node.js", level: 85 }
      ],
      cloud: [
        { name: "AWS", level: 85 },
        { name: "Azure", level: 80 },
        { name: "Docker", level: 85 },
        { name: "ELK Stack", level: 85 }
      ],
      databases: [
        { name: "DynamoDB", level: 85 },
        { name: "SQL", level: 90 },
        { name: "Oracle", level: 85 },
        { name: "MySQL", level: 85 },
        { name: "PostgreSQL", level: 85 },
        { name: "NoSQL", level: 80 }
      ],
      analytics: [
        { name: "Python", level: 90 },
        { name: "Jupyter", level: 85 },
        { name: "ML", level: 80 },
        { name: "PowerBI", level: 90 },
        { name: "ELK", level: 85 },
        { name: "Smartsheet", level: 90 },
        { name: "Excel (VBA)", level: 90 }
      ]
    },

    education: [
      {
        school: "Stony Brook University",
        location: "Stony Brook, NY",
        degree: "B.S. in Neuroscience",
        period: "August 2007 to June 2009"
      },
      {
        school: "SUNY CGCC",
        location: "Hudson, NY",
        degree: "Associate in Science (AS) in Biology",
        period: "August 2005 to June 2007"
      }
    ],

    certifications: [
      "SAFe Agile SSM",
      "AWS Associate Architect",
      "Smartsheet PM",
      "Currently Enrolled in Generative AI Nano Degree"
    ],

    additionalInfo: [
      "Passionate about continuous learning and solving complex problems",
      "Active contributor to open-source projects related to healthcare technology",
      "Mentor for junior developers, focusing on best practices and code quality"
    ],
    projects: [
      {
        startDate: "2020-01-01",
        endDate: "2021-01-01",
        title: "Patient Management System",
        description: "Developed a patient management system for healthcare providers to manage patient data and appointments. The system is built with a microservices architecture using Node.js, React, and PostgreSQL.",
        period: "1 Year",
        technologies: ["Node.js", "React", "PostgreSQL"],
        highlights: [
          "Implemented user authentication and authorization using OAuth 2.0",
          "Designed and developed RESTful APIs for patient data management",
          "Integrated with third-party APIs for appointment reminders and notifications"
        ],
        link: "https://example.com",
        image: "/api/placeholder/800/400"
      },
      {
        startDate: "2018-01-01",
        endDate: "2019-01-01",
        title: "E-commerce Platform",
        description: "Built an e-commerce platform for small businesses to sell products online. The platform includes inventory management, order processing, and payment integration.",
        period: "1 Year",
        technologies: ["Angular", "Node.js", "MongoDB"],
        highlights: [
          "Developed a responsive frontend using Angular and Bootstrap",
          "Implemented a RESTful API for product catalog and order processing",
          "Integrated with Stripe for payment processing"
        ],
        image: "/api/placeholder/800/400"
      },
      {
        startDate: "2016-01-01",
        endDate: "2017-01-01",
        title: "Social Networking App",
        description: "Designed and developed a social networking app for connecting users based on common interests. The app includes features like user profiles, messaging, and news feed.",
        period: "1 Year",
        technologies: ["React Native", "Node.js", "MongoDB"],
        highlights: [
          "Implemented real-time chat functionality using WebSockets",
          "Designed a scalable backend architecture using microservices",
          "Optimized app performance for high user engagement"
        ],
        image: "/api/placeholder/800/400"
      }
    ],
  };
<<< FILE END

>>> FILE START: src\hooks\use-local-storage.ts [type=ts]
// src/hooks/use-local-storage.ts
import { useState, useEffect } from 'react';

type StorageValue<T> = T | null;

export function useLocalStorage<T>(key: string, initialValue: T): [StorageValue<T>, (value: T) => void, () => void] {
  // Function to get stored value from localStorage
  const readValue = (): StorageValue<T> => {
    if (typeof window === 'undefined') {
      return initialValue;
    }

    try {
      const item = window.localStorage.getItem(key);
      return item ? (JSON.parse(item) as T) : initialValue;
    } catch (error) {
      console.warn(`Error reading localStorage key "${key}":`, error);
      return initialValue;
    }
  };

  // State to store the value
  const [storedValue, setStoredValue] = useState<StorageValue<T>>(readValue);

  // Function to update stored value and localStorage
  const setValue = (value: T) => {
    if (typeof window === 'undefined') {
      console.warn(`Tried setting localStorage key "${key}" even though environment is not a browser`);
      return;
    }

    try {
      // Save state
      setStoredValue(value);
      // Save to localStorage
      window.localStorage.setItem(key, JSON.stringify(value));
      // Dispatch a custom event so other instances of useLocalStorage can update
      window.dispatchEvent(new Event('local-storage'));
    } catch (error) {
      console.warn(`Error setting localStorage key "${key}":`, error);
    }
  };

  // Function to remove the item from localStorage
  const removeValue = () => {
    if (typeof window === 'undefined') {
      return;
    }

    try {
      // Remove from localStorage
      window.localStorage.removeItem(key);
      // Reset state
      setStoredValue(null);
      // Dispatch a custom event
      window.dispatchEvent(new Event('local-storage'));
    } catch (error) {
      console.warn(`Error removing localStorage key "${key}":`, error);
    }
  };

  // Listen for changes to localStorage
  useEffect(() => {
    const handleStorageChange = () => {
      setStoredValue(readValue());
    };

    // Listen to updates from other instances of useLocalStorage
    window.addEventListener('local-storage', handleStorageChange);
    // Listen to changes from other documents
    window.addEventListener('storage', handleStorageChange);

    return () => {
      window.removeEventListener('local-storage', handleStorageChange);
      window.removeEventListener('storage', handleStorageChange);
    };
  }, []);

  return [storedValue, setValue, removeValue];
}

<<< FILE END

>>> FILE START: src\hooks\use-toast.ts [type=ts]
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

<<< FILE END

>>> FILE START: src\index.css [type=css]
/* src/index.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    /* Modern blue-based professional palette */
    --background: 210 40% 98%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;

    /* Primary blue - more vibrant for better accent */
    --primary: 215 90% 55%;
    --primary-foreground: 210 40% 98%;

    /* Secondary tones */
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 56.9%;

    /* Accent colors */
    --accent: 215 90% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;

    /* Utility colors */
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 215 90% 55%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;

    /* Primary blue - more vibrant for dark mode */
    --primary: 215 90% 55%;
    --primary-foreground: 210 40% 98%;

    /* Dark mode secondary tones */
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 75.1%;

    /* Dark mode accent */
    --accent: 215 90% 20%;
    --accent-foreground: 210 40% 98%;

    /* Utility colors */
    --destructive: 0 62.8% 40.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 215 90% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground;
  }

  /* Improve typography */
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    @apply font-semibold tracking-tight;
  }

  h1 {
    @apply text-4xl md:text-5xl;
  }

  h2 {
    @apply text-3xl md:text-4xl;
  }

  h3 {
    @apply text-2xl md:text-3xl;
  }

  p {
    @apply leading-relaxed;
  }
}

@layer components {

  /* Improved card styling */
  .card {
    @apply transition-all duration-300 hover:translate-y-[-2px] hover:shadow-lg;
  }

  /* Enhanced button styling */
  .btn-primary {
    @apply bg-primary text-primary-foreground shadow-sm hover:shadow-md hover:shadow-primary/20 transition-all;
  }

  /* Badge styling */
  .badge-skill {
    @apply text-xs font-medium px-2.5 py-0.5 rounded-full bg-primary/10 text-primary-foreground;
  }
}

/* Split view styles */
.split-view-container {
  @apply flex flex-col h-screen overflow-hidden;
}

.panel-content {
  @apply h-full overflow-auto p-4;
}

.resize-handle {
  @apply relative w-1.5 bg-border cursor-col-resize transition-colors;
}

.resize-handle:hover,
.resize-handle:active {
  @apply bg-primary/40;
}

/* Resume section highlighting */
.resume-section {
  @apply transition-all duration-300 relative pl-2 mb-6;
}

.resume-section.section-active {
  @apply border-l-4 border-primary bg-accent/30 pl-4;
}

/* Focus mode styling */
.focus-mode .resume-section:not(.section-active) {
  @apply opacity-40 blur-[0.5px] transition-all duration-300;
}

.focus-mode .resume-section:hover:not(.section-active) {
  @apply opacity-80 blur-none;
}

/* Improved tab styles */
.tabs-button {
  @apply transition-all duration-300 ease-in-out;
}

.tabs-button:hover {
  @apply bg-accent text-accent-foreground;
}

.tabs-button[data-state="active"] {
  @apply bg-primary text-primary-foreground shadow-sm;
}

/* Print-specific styling */
@media print {
  @page {
    margin: 20mm;
    size: A4;
  }

  body {
    -webkit-print-color-adjust: exact !important;
    print-color-adjust: exact !important;
  }

  /* Hide interactive UI elements */
  button,
  .tabs-list,
  .edit-controls,
  .no-print {
    display: none !important;
  }

  /* Make sure content is visible */
  .tabs-content {
    display: block !important;
    visibility: visible !important;
  }

  /* Ensure page breaks don't occur in the middle of sections */
  .resume-section {
    page-break-inside: avoid;
    break-inside: avoid;
  }

  /* Card styling for print */
  .card {
    @apply border shadow-none;
  }

  /* Ensure good contrast for text */
  body,
  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  p,
  li,
  a {
    color: black !important;
  }
}

/* Animation keyframes */
@keyframes fadeIn {
  from {
    opacity: 0;
  }

  to {
    opacity: 1;
  }
}

@keyframes slideUp {
  from {
    transform: translateY(10px);
    opacity: 0;
  }

  to {
    transform: translateY(0);
    opacity: 1;
  }
}

@keyframes scaleIn {
  from {
    transform: scale(0.95);
    opacity: 0;
  }

  to {
    transform: scale(1);
    opacity: 1;
  }
}

/* Animation classes */
.animate-fade-in {
  animation: fadeIn 0.5s ease-out forwards;
}

.animate-slide-up {
  animation: slideUp 0.4s ease-out forwards;
}

.animate-scale-in {
  animation: scaleIn 0.4s ease-out forwards;
}
/* Add to your index.css */
@layer utilities {
  .dark-card {
    @apply dark:bg-dark-card dark:border-dark-border dark:text-dark-text;
  }

  .dark-badge {
    @apply dark:bg-dark-muted/30 dark:text-dark-highlight dark:hover:bg-dark-muted/50;
  }

  .dark-accent {
    @apply dark:text-dark-accent;
  }

  .dark-highlight {
    @apply dark:text-dark-highlight;
  }
}

/* Smooth transitions for dark mode */
.dark .card,
.dark .badge,
.dark .btn,
.dark * {
  transition-property: background-color, border-color, color, fill, stroke;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  transition-duration: 150ms;
}
<<< FILE END

>>> FILE START: src\lib\cache.ts [type=ts]
// src/lib/cache.ts
interface CacheItem<T> {
  data: T;
  timestamp: number;
  expiry: number;
}

export function createCache<T>(ttl: number = 5 * 60 * 1000) {
  // Default 5 minutes
  const cache = new Map<string, CacheItem<T>>();

  return {
    get: (key: string): T | null => {
      const item = cache.get(key);
      if (!item) return null;

      const now = Date.now();
      if (now - item.timestamp > item.expiry) {
        cache.delete(key);
        return null;
      }

      return item.data;
    },

    set: (key: string, data: T, customTtl?: number): void => {
      cache.set(key, {
        data,
        timestamp: Date.now(),
        expiry: customTtl || ttl,
      });
    },

    delete: (key: string): void => {
      cache.delete(key);
    },

    clear: (): void => {
      cache.clear();
    },
  };
}

// Create a GitHub cache instance
export const githubCache = createCache<any>(30 * 60 * 1000); // 30 minutes

<<< FILE END

>>> FILE START: src\lib\resume-utils.ts [type=ts]
// src/lib/resume-utils.ts
import { format } from 'date-fns';

// Format dates consistently across the resume
export function formatDate(dateString: string): string {
  try {
    const date = new Date(dateString);
    return format(date, 'MMM yyyy');
  } catch (e) {
    // If it's already formatted or invalid, return as is
    return dateString;
  }
}

// Generate initials from name
export function getInitials(name: string): string {
  if (!name) return '';
  return name
    .split(' ')
    .map((n) => n[0])
    .join('')
    .toUpperCase();
}

// Determine skill level descriptors
export function getSkillLevelText(level: number): string {
  if (level >= 90) return 'Expert';
  if (level >= 75) return 'Advanced';
  if (level >= 60) return 'Intermediate';
  if (level >= 40) return 'Basic';
  return 'Beginner';
}

<<< FILE END

>>> FILE START: src\lib\utils.ts [type=ts]
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
<<< FILE END

>>> FILE START: src\main.tsx [type=tsx]
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

<<< FILE END

>>> FILE START: src\services\github.ts [type=ts]
import { githubCache } from "@/lib/cache";

// src/services/github.ts
export interface GithubRepo {
  id: number;
  name: string;
  description: string;
  html_url: string;
  homepage: string;
  stargazers_count: number;
  language: string;
  created_at: string;
  updated_at: string;
  topics: string[];
}

export async function fetchUserRepos(username: string, count: number = 6, sort: 'updated' | 'created' | 'pushed' = 'updated'): Promise<GithubRepo[]> {
  const cacheKey = `repos_${username}_${count}_${sort}`;
  const cachedData = githubCache.get(cacheKey);

  if (cachedData) {
    return cachedData;
  }

  try {
    const response = await fetch(`https://api.github.com/users/${username}/repos?sort=${sort}&per_page=${count}`, {
      headers: {
        Accept: 'application/vnd.github.v3+json',
        // Use environment variable for the token if you're using one
        // 'Authorization': `token ${process.env.GITHUB_TOKEN}`
      },
    });

    if (!response.ok) {
      throw new Error(`GitHub API error: ${response.status}`);
    }

    const repos = await response.json();
    githubCache.set(cacheKey, repos);
    return repos;
  } catch (error) {
    console.error('Error fetching GitHub repositories:', error);
    return [];
  }
}

// Fetch repository topics (tags)
export async function fetchRepoTopics(username: string, repoName: string): Promise<string[]> {
  try {
    const response = await fetch(`https://api.github.com/repos/${username}/${repoName}/topics`, {
      headers: {
        Accept: 'application/vnd.github.mercy-preview+json',
      },
    });

    if (!response.ok) {
      throw new Error(`GitHub API error: ${response.status}`);
    }

    const data = await response.json();
    return data.names || [];
  } catch (error) {
    console.error('Error fetching repository topics:', error);
    return [];
  }
}

<<< FILE END

>>> FILE START: src\styles\print.css [type=css]
/* src/styles/print.css */

/* Base print styles */
@media print {
  @page {
    margin: 20mm;
    size: A4;
  }

  body {
    -webkit-print-color-adjust: exact !important;
    print-color-adjust: exact !important;
    color-adjust: exact !important;
  }

  /* Hide interactive elements */
  button:not([data-print="true"]),
  .no-print {
    display: none !important;
  }

  /* Ensure dark mode doesn't affect printing */
  :root[class~="dark"],
  [data-theme="dark"] {
    --background: 0 0% 100% !important;
    --foreground: 222.2 84% 4.9% !important;
    --card: 0 0% 100% !important;
    --card-foreground: 222.2 84% 4.9% !important;
    --popover: 0 0% 100% !important;
    --popover-foreground: 222.2 84% 4.9% !important;
    --primary: 222.2 47.4% 11.2% !important;
    --primary-foreground: 210 40% 98% !important;
    --secondary: 210 40% 96.1% !important;
    --secondary-foreground: 222.2 47.4% 11.2% !important;
    --muted: 210 40% 96.1% !important;
    --muted-foreground: 215.4 16.3% 46.9% !important;
    --accent: 210 40% 96.1% !important;
    --accent-foreground: 222.2 47.4% 11.2% !important;
    --destructive: 0 84.2% 60.2% !important;
    --destructive-foreground: 210 40% 98% !important;
    --border: 214.3 31.8% 91.4% !important;
    --input: 214.3 31.8% 91.4% !important;
    --ring: 222.2 84% 4.9% !important;
  }

  /* Force page breaks between sections */
  section,
  .page-break-inside-avoid {
    page-break-inside: avoid;
    break-inside: avoid;
  }

  /* Force page breaks before certain elements */
  h1, h2, h3,
  .page-break-before {
    page-break-before: always;
    break-before: always;
  }

  /* Ensure no page breaks after headings */
  h1, h2, h3, h4, h5, h6 {
    page-break-after: avoid;
    break-after: avoid;
  }

  /* Enhance readability */
  p, li {
    page-break-inside: avoid;
    orphans: 3;
    widows: 3;
  }

  /* Text links */
  a {
    text-decoration: none;
    color: inherit !important;
  }

  /* Show link URLs for external links */
  a[href^="http"]:after {
    content: " (" attr(href) ")";
    font-size: 0.8em;
    font-style: italic;
    color: #555;
  }

  /* But don't show URLs for internal links or javascript: links */
  a[href^="#"]:after,
  a[href^="javascript:"]:after {
    content: "";
  }

  /* Improve table presentation */
  table {
    border-collapse: collapse !important;
  }

  /* Remove shadows and effects that don't print well */
  * {
    box-shadow: none !important;
    text-shadow: none !important;
    transition: none !important;
  }
}

/* Additional styles for PDF export */
body.print-export {
  background-color: white !important;

  /* Ensure consistent colors during export */
  --background: 0 0% 100% !important;
  --foreground: 222.2 84% 4.9% !important;
  --card: 0 0% 100% !important;
  --card-foreground: 222.2 84% 4.9% !important;

  /* Hide elements during export */
  [data-export="false"],
  .no-export {
    display: none !important;
  }

  /* Remove any scrollbars */
  overflow: hidden !important;
}

/* Targeting specific resume components */
@media print {
  /* Adjust the resume container */
  .resume-container {
    max-width: 100% !important;
    padding: 0 !important;
    margin: 0 !important;
  }
}

body.print-export {
  /* Adjust the resume container */
  .resume-container {
    max-width: 100% !important;
    padding: 0 !important;
    margin: 0 !important;
  }

  /* Ensure all content is visible */
  .resume-content {
    height: auto !important;
    overflow: visible !important;
  }

  /* Adjust headings and text for better print layout */
  .resume-heading {
    margin-bottom: 1rem !important;
  }

  .resume-section {
    margin-bottom: 1.5rem !important;
    page-break-inside: avoid;
  }

  /* Ensure good contrast for skills */
  .skill-bar {
    border: 1px solid #000 !important;
    background-color: #f0f0f0 !important;
  }

  .skill-progress {
    background-color: #333 !important;
  }

  /* Format the tabs properly */
  .tabs-content-print {
    display: block !important;
    visibility: visible !important;
  }
    /* Add to your print.css */
    @media print {

      /* Remove background colors and use borders instead */
      .card {
        border: 1px solid #ddd !important;
        box-shadow: none !important;
      }

      /* Ensure text is black for better printing */
      body {
        color: black !important;
      }

      /* Enhance readability of headings */
      h1,
      h2,
      h3,
      h4 {
        color: black !important;
        page-break-after: avoid;
      }

      /* Ensure page breaks don't occur in awkward places */
      .experience-item,
      .education-item,
      .project-item {
        page-break-inside: avoid;
      }
    }
}
<<< FILE END

>>> FILE START: src\types\resume.ts [type=ts]
// src/types/resume.ts (with schema added)
import * as z from 'zod';

export interface Profile {
  avatar: string | undefined;
  links: any;
  name: string;
  title: string;
  location: string;
  email: string;
  phone: string;
  bio: string;
}

export interface Skill {
  name: string;
  level?: number;
  experience?: string;
}

export interface Experience {
  company: string;
  position: string;
  location?: string;
  period: string;
  achievements: string[];
  technologies?: string[];
}

export interface Education {
  school: string;
  degree: string;
  location: string;
  period: string;
  achievements?: string[];
  gpa?: number;
}

export interface Project {
  startDate: string;
  endDate: string;
  title: string;
  description: string;
  period: string;
  technologies: string[];
  highlights: string[];
  link?: string;
  image?: string;
}

export interface ResumeData {
  projects: Project[];
  profile: Profile;
  experience: Experience[];
  skills: {
    frontend: Skill[];
    backend: Skill[];
    cloud: Skill[];
    databases: Skill[];
    analytics: Skill[];
  };
  education: Education[];
  certifications: string[];
  additionalInfo: string[];
  social: {
    github: string; // GitHub username
    linkedin: string;
    twitter?: string;
  };

}

// Zod schema for form validation
export const resumeSchema = z.object({
  profile: z.object({
    name: z.string().min(2, 'Name must be at least 2 characters'),
    title: z.string().min(2, 'Title must be at least 2 characters'),
    location: z.string(),
    email: z.string().email('Please enter a valid email address'),
    phone: z.string(),
    bio: z.string().min(10, 'Bio must be at least 10 characters'),
    avatar: z.string().optional(),
    links: z
      .object({
        github: z.string().optional(),
        linkedin: z.string().optional(),
        website: z.string().optional(),
      })
      .optional(),
  }),
  experience: z.array(
    z.object({
      company: z.string().min(2, 'Company name must be at least 2 characters'),
      position: z.string().min(2, 'Position must be at least 2 characters'),
      location: z.string().optional(),
      period: z.string(),
      achievements: z.array(z.string()),
      technologies: z.array(z.string()).optional(),
    }),
  ),
  skills: z.object({
    frontend: z.array(
      z.object({
        name: z.string(),
        level: z.number().min(0).max(100).optional(),
        experience: z.string().optional(),
      }),
    ),
    backend: z.array(
      z.object({
        name: z.string(),
        level: z.number().min(0).max(100).optional(),
        experience: z.string().optional(),
      }),
    ),
    cloud: z
      .array(
        z.object({
          name: z.string(),
          level: z.number().min(0).max(100).optional(),
          experience: z.string().optional(),
        }),
      )
      .optional(),
    databases: z
      .array(
        z.object({
          name: z.string(),
          level: z.number().min(0).max(100).optional(),
          experience: z.string().optional(),
        }),
      )
      .optional(),
    analytics: z
      .array(
        z.object({
          name: z.string(),
          level: z.number().min(0).max(100).optional(),
          experience: z.string().optional(),
        }),
      )
      .optional(),
  }),
  education: z.array(
    z.object({
      school: z.string().min(2, 'School name must be at least 2 characters'),
      degree: z.string().min(2, 'Degree must be at least 2 characters'),
      location: z.string(),
      period: z.string(),
      achievements: z.array(z.string()).optional(),
      gpa: z.number().min(0).max(4).optional(),
    }),
  ),
  projects: z
    .array(
      z.object({
        title: z.string().min(2, 'Project title must be at least 2 characters'),
        description: z.string(),
        period: z.string(),
        startDate: z.string(),
        endDate: z.string().optional(),
        technologies: z.array(z.string()),
        highlights: z.array(z.string()),
        link: z.string().optional(),
        image: z.string().optional(),
      }),
    )
    .optional(),
  certifications: z.array(z.string()).optional(),
  additionalInfo: z.array(z.string()).optional(),
});

<<< FILE END

>>> FILE START: tailwind.config.js [type=js]
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ["class"],
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
  ],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "sm": "640px",
        "md": "768px",
        "lg": "1024px",
        "xl": "1280px",
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          50: "#F0F7FF",
          100: "#E0EFFF",
          200: "#B9DAFF",
          300: "#8CC3FF",
          400: "#5BA7FF",
          500: "#3B82F6", // Main primary color
          600: "#2563EB",
          700: "#1D4ED8",
          800: "#1E40AF",
          900: "#1E3A8A",
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      boxShadow: {
        'skill': '0 2px 8px -1px rgba(0, 0, 0, 0.1)',
        'card-hover': '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',
      },
    }
  },
  plugins: [
    require("tailwindcss-animate"),
  ],
}
<<< FILE END
